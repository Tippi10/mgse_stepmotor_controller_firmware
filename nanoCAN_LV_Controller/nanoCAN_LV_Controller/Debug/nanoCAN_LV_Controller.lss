
nanoCAN_LV_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000f0e  00000fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  0080010a  0080010a  00000fac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d3  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee0  00000000  00000000  0000296f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001277  00000000  00000000  0000384f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00004ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ec  00000000  00000000  00004e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e8  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 77 05 	jmp	0xaee	; 0xaee <__vector_14>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_17>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e0       	ldi	r30, 0x0E	; 14
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 36       	cpi	r26, 0x6D	; 109
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  b2:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <WatchDog_init>:
{
	//FRam_init(); //T.B.C Need to confrim the Mission Time/State Machine allignment Sequence
}

void CAN_init() //int
{
  ba:	f8 94       	cli
  bc:	a8 95       	wdr
  be:	84 b7       	in	r24, 0x34	; 52
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	84 bf       	out	0x34, r24	; 52
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 61       	ori	r24, 0x18	; 24
  cc:	80 83       	st	Z, r24
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <init>:
  e2:	0e 94 5d 00 	call	0xba	; 0xba <WatchDog_init>
  e6:	78 94       	sei
  e8:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_select>
  ec:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <RTC_100us>
  f0:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <RTC_100us+0x1>
  f4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <RTC_100us+0x2>
  f8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <RTC_100us+0x3>
  fc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <RTC_ms>
 100:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <RTC_ms+0x1>
 104:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <RTC_ms+0x2>
 108:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <RTC_ms+0x3>
 10c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <RTC_s>
 110:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <RTC_s+0x1>
 114:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <RTC_s+0x2>
 118:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <RTC_s+0x3>
 11c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_RTC_Tim0OVF_Count>
 120:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_RTC_Tim0OVF_Count+0x1>
 124:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_RTC_Tim0OVF_Count+0x2>
 128:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <_RTC_Tim0OVF_Count+0x3>
 12c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <_RTC_Tim0OVF_Count1>
 130:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <_RTC_Tim0OVF_Count2>
 134:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <_RTC_100us>
 138:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <_RTC_100us+0x1>
 13c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <_RTC_100us+0x2>
 140:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <_RTC_100us+0x3>
 144:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_RTC_ms>
 148:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <_RTC_ms+0x1>
 14c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <_RTC_ms+0x2>
 150:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_RTC_ms+0x3>
 154:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <_RTC_s>
 158:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <_RTC_s+0x1>
 15c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <_RTC_s+0x2>
 160:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <_RTC_s+0x3>
 164:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 168:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 16c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 170:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
 174:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_Control_Flag_1>
 178:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_Control_Flag_1+0x1>
 17c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_Control_Flag_1+0x2>
 180:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_Control_Flag_1+0x3>
 184:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <_Control_Flag_2>
 188:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <_Control_Flag_2+0x1>
 18c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_Control_Flag_2+0x2>
 190:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <_Control_Flag_2+0x3>
 194:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_Control_Flag_3>
 198:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_Control_Flag_3+0x1>
 19c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_Control_Flag_3+0x2>
 1a0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_Control_Flag_3+0x3>
 1a4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_Control_Flag_4>
 1a8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <_Control_Flag_4+0x1>
 1ac:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_Control_Flag_4+0x2>
 1b0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <_Control_Flag_4+0x3>
 1b4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 1b8:	ee e6       	ldi	r30, 0x6E	; 110
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	80 83       	st	Z, r24
 1c2:	14 bc       	out	0x24, r1	; 36
 1c4:	15 bc       	out	0x25, r1	; 37
 1c6:	85 b5       	in	r24, 0x25	; 37
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	85 bd       	out	0x25, r24	; 37
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 bd       	out	0x25, r24	; 37
 1d2:	87 ee       	ldi	r24, 0xE7	; 231
 1d4:	86 bd       	out	0x26, r24	; 38
 1d6:	80 81       	ld	r24, Z
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24
 1dc:	ef e6       	ldi	r30, 0x6F	; 111
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	80 83       	st	Z, r24
 1e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 1ea:	e1 e8       	ldi	r30, 0x81	; 129
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	10 82       	st	Z, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	80 83       	st	Z, r24
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	80 83       	st	Z, r24
 200:	80 81       	ld	r24, Z
 202:	82 60       	ori	r24, 0x02	; 2
 204:	80 83       	st	Z, r24
 206:	80 81       	ld	r24, Z
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 83       	st	Z, r24
 20c:	80 81       	ld	r24, Z
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	80 83       	st	Z, r24
 212:	e8 ec       	ldi	r30, 0xC8	; 200
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <main>:
 21e:	0e 94 71 00 	call	0xe2	; 0xe2 <init>
 222:	0e 94 b5 02 	call	0x56a	; 0x56a <setup>
 226:	a8 95       	wdr
 228:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <loop>
 22c:	fc cf       	rjmp	.-8      	; 0x226 <main+0x8>

0000022e <__vector_17>:
	
}

//volatile bool T_State=true;
ISR(TIMER0_OVF_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
	//GPIO_DW_HIGH(_PD4); //for timing
	TCNT0 = TCNT0_RST;
 240:	87 ee       	ldi	r24, 0xE7	; 231
 242:	86 bd       	out	0x26, r24	; 38
	_RTC_Tim0OVF_Count++; //Count the overall Tim0 OVF times -> used in micros()
 244:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_RTC_Tim0OVF_Count>
 248:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_RTC_Tim0OVF_Count+0x1>
 24c:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_RTC_Tim0OVF_Count+0x2>
 250:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_RTC_Tim0OVF_Count+0x3>
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	a1 1d       	adc	r26, r1
 258:	b1 1d       	adc	r27, r1
 25a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_RTC_Tim0OVF_Count>
 25e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_RTC_Tim0OVF_Count+0x1>
 262:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <_RTC_Tim0OVF_Count+0x2>
 266:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <_RTC_Tim0OVF_Count+0x3>
	_RTC_Tim0OVF_Count1++; //Count the overall Tim0 OVF times -> used in ms++
 26a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_RTC_Tim0OVF_Count1>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_RTC_Tim0OVF_Count1>
	_RTC_Tim0OVF_Count2++; //Count the overall Tim0 OVF times -> used in s++
 274:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_RTC_Tim0OVF_Count2>
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <_RTC_Tim0OVF_Count2>
	_RTC_100us += RTC_PERIOD_100US;
 27e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_RTC_100us>
 282:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_RTC_100us+0x1>
 286:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <_RTC_100us+0x2>
 28a:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <_RTC_100us+0x3>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	a1 1d       	adc	r26, r1
 292:	b1 1d       	adc	r27, r1
 294:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_RTC_100us>
 298:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_RTC_100us+0x1>
 29c:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <_RTC_100us+0x2>
 2a0:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <_RTC_100us+0x3>
	
	if(_RTC_Tim0OVF_Count1 > 9) //per 10 100us
 2a4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_RTC_Tim0OVF_Count1>
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	a8 f0       	brcs	.+42     	; 0x2d6 <__vector_17+0xa8>
	{
		_RTC_ms++;
 2ac:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_RTC_ms>
 2b0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_RTC_ms+0x1>
 2b4:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <_RTC_ms+0x2>
 2b8:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <_RTC_ms+0x3>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	a1 1d       	adc	r26, r1
 2c0:	b1 1d       	adc	r27, r1
 2c2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <_RTC_ms>
 2c6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <_RTC_ms+0x1>
 2ca:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <_RTC_ms+0x2>
 2ce:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <_RTC_ms+0x3>
		_RTC_Tim0OVF_Count1 = 0;
 2d2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <_RTC_Tim0OVF_Count1>
	}
	if(_RTC_Tim0OVF_Count2 > 9999) //per 10000 100us
 2d6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_RTC_Tim0OVF_Count2>
	{
		_RTC_s++;
		_RTC_Tim0OVF_Count2 = 0;
	}
	
	if(!_Control_Flag_0) _Control_Flag_0 = 0;
 2da:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_Control_Flag_0>
 2de:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_Control_Flag_0+0x1>
 2e2:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_Control_Flag_0+0x2>
 2e6:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_Control_Flag_0+0x3>
 2ea:	89 2b       	or	r24, r25
 2ec:	8a 2b       	or	r24, r26
 2ee:	8b 2b       	or	r24, r27
 2f0:	41 f4       	brne	.+16     	; 0x302 <__vector_17+0xd4>
 2f2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 2f6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 2fa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 2fe:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
	if(!_Control_Flag_1) _Control_Flag_1 = 0;
 302:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_Control_Flag_1>
 306:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_Control_Flag_1+0x1>
 30a:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <_Control_Flag_1+0x2>
 30e:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <_Control_Flag_1+0x3>
 312:	89 2b       	or	r24, r25
 314:	8a 2b       	or	r24, r26
 316:	8b 2b       	or	r24, r27
 318:	41 f4       	brne	.+16     	; 0x32a <__vector_17+0xfc>
 31a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_Control_Flag_1>
 31e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_Control_Flag_1+0x1>
 322:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_Control_Flag_1+0x2>
 326:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_Control_Flag_1+0x3>
	if(!_Control_Flag_2) _Control_Flag_2 = 0;
 32a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <_Control_Flag_2>
 32e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <_Control_Flag_2+0x1>
 332:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <_Control_Flag_2+0x2>
 336:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <_Control_Flag_2+0x3>
 33a:	89 2b       	or	r24, r25
 33c:	8a 2b       	or	r24, r26
 33e:	8b 2b       	or	r24, r27
 340:	41 f4       	brne	.+16     	; 0x352 <__vector_17+0x124>
 342:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <_Control_Flag_2>
 346:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <_Control_Flag_2+0x1>
 34a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_Control_Flag_2+0x2>
 34e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <_Control_Flag_2+0x3>
	if(!_Control_Flag_3) _Control_Flag_3 = 0;
 352:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_Control_Flag_3>
 356:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <_Control_Flag_3+0x1>
 35a:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <_Control_Flag_3+0x2>
 35e:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <_Control_Flag_3+0x3>
 362:	89 2b       	or	r24, r25
 364:	8a 2b       	or	r24, r26
 366:	8b 2b       	or	r24, r27
 368:	41 f4       	brne	.+16     	; 0x37a <__vector_17+0x14c>
 36a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_Control_Flag_3>
 36e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_Control_Flag_3+0x1>
 372:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_Control_Flag_3+0x2>
 376:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_Control_Flag_3+0x3>
	if(!_Control_Flag_4) _Control_Flag_4 = 0;
 37a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_Control_Flag_4>
 37e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_Control_Flag_4+0x1>
 382:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_Control_Flag_4+0x2>
 386:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_Control_Flag_4+0x3>
 38a:	89 2b       	or	r24, r25
 38c:	8a 2b       	or	r24, r26
 38e:	8b 2b       	or	r24, r27
 390:	41 f4       	brne	.+16     	; 0x3a2 <__vector_17+0x174>
 392:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_Control_Flag_4>
 396:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <_Control_Flag_4+0x1>
 39a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_Control_Flag_4+0x2>
 39e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <_Control_Flag_4+0x3>
	
	SRTC(RTC0); RTC_100us = _RTC_100us;
 3a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 3ac:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_RTC_100us>
 3b0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_RTC_100us+0x1>
 3b4:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <_RTC_100us+0x2>
 3b8:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <_RTC_100us+0x3>
 3bc:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <RTC_100us>
 3c0:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <RTC_100us+0x1>
 3c4:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <RTC_100us+0x2>
 3c8:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <RTC_100us+0x3>
	SRTC(RTC1); RTC_ms = _RTC_ms;
 3cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 3d6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_RTC_ms>
 3da:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_RTC_ms+0x1>
 3de:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <_RTC_ms+0x2>
 3e2:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <_RTC_ms+0x3>
 3e6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <RTC_ms>
 3ea:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <RTC_ms+0x1>
 3ee:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <RTC_ms+0x2>
 3f2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <RTC_ms+0x3>
	SRTC(RTC2); RTC_s = _RTC_s;
 3f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3fa:	84 60       	ori	r24, 0x04	; 4
 3fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 400:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_RTC_s>
 404:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_RTC_s+0x1>
 408:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <_RTC_s+0x2>
 40c:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <_RTC_s+0x3>
 410:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <RTC_s>
 414:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <RTC_s+0x1>
 418:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <RTC_s+0x2>
 41c:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <RTC_s+0x3>
	SRTC(CF0); _Control_Flag_0++;
 420:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 424:	88 60       	ori	r24, 0x08	; 8
 426:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 42a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_Control_Flag_0>
 42e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_Control_Flag_0+0x1>
 432:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_Control_Flag_0+0x2>
 436:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_Control_Flag_0+0x3>
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	a1 1d       	adc	r26, r1
 43e:	b1 1d       	adc	r27, r1
 440:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_Control_Flag_0>
 444:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_Control_Flag_0+0x1>
 448:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <_Control_Flag_0+0x2>
 44c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <_Control_Flag_0+0x3>
	SRTC(CF1); _Control_Flag_1++;
 450:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 454:	80 61       	ori	r24, 0x10	; 16
 456:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 45a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_Control_Flag_1>
 45e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_Control_Flag_1+0x1>
 462:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <_Control_Flag_1+0x2>
 466:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <_Control_Flag_1+0x3>
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	a1 1d       	adc	r26, r1
 46e:	b1 1d       	adc	r27, r1
 470:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_Control_Flag_1>
 474:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <_Control_Flag_1+0x1>
 478:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <_Control_Flag_1+0x2>
 47c:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <_Control_Flag_1+0x3>
	SRTC(CF2); _Control_Flag_2++;
 480:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 484:	80 62       	ori	r24, 0x20	; 32
 486:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 48a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <_Control_Flag_2>
 48e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <_Control_Flag_2+0x1>
 492:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <_Control_Flag_2+0x2>
 496:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <_Control_Flag_2+0x3>
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	a1 1d       	adc	r26, r1
 49e:	b1 1d       	adc	r27, r1
 4a0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_Control_Flag_2>
 4a4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <_Control_Flag_2+0x1>
 4a8:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <_Control_Flag_2+0x2>
 4ac:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <_Control_Flag_2+0x3>
	SRTC(CF3); _Control_Flag_3++;
 4b0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 4b4:	80 64       	ori	r24, 0x40	; 64
 4b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 4ba:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_Control_Flag_3>
 4be:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <_Control_Flag_3+0x1>
 4c2:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <_Control_Flag_3+0x2>
 4c6:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <_Control_Flag_3+0x3>
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	a1 1d       	adc	r26, r1
 4ce:	b1 1d       	adc	r27, r1
 4d0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <_Control_Flag_3>
 4d4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <_Control_Flag_3+0x1>
 4d8:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <_Control_Flag_3+0x2>
 4dc:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <_Control_Flag_3+0x3>
	SRTC(CF4); _Control_Flag_4++;
 4e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 4e4:	80 68       	ori	r24, 0x80	; 128
 4e6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 4ea:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_Control_Flag_4>
 4ee:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_Control_Flag_4+0x1>
 4f2:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_Control_Flag_4+0x2>
 4f6:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_Control_Flag_4+0x3>
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	a1 1d       	adc	r26, r1
 4fe:	b1 1d       	adc	r27, r1
 500:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_Control_Flag_4>
 504:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_Control_Flag_4+0x1>
 508:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_Control_Flag_4+0x2>
 50c:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_Control_Flag_4+0x3>
	if(!T_State) T_State=true;
	else T_State = false;
	if(T_State) GPIO_DW_HIGH(_PB6);//GPIO_DO_HIGH(LEDPort,LEDMsk);
	else GPIO_DW_LOW(_PB6);//GPIO_DO_LOW(LEDPort,LEDMsk);
	*/
}
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_28>:

ISR(WDT_vect)
{
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
	Error_Handler();//Error Handler
 544:	0e 94 cf 02 	call	0x59e	; 0x59e <Error_Handler>
}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <setup>:
			break;
		case LV_3_ADDR:
			LV_POS_RST_flag[2] = 1;
			break;
		case LV_4_ADDR:
			LV_POS_RST_flag[3] = 1;
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	cb 01       	movw	r24, r22
 570:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <CAN_initialize>
 574:	40 9a       	sbi	0x08, 0	; 8
 576:	08 95       	ret

00000578 <GPIO_select>:
 578:	52 9a       	sbi	0x0a, 2	; 10
 57a:	54 9a       	sbi	0x0a, 4	; 10
 57c:	56 9a       	sbi	0x0a, 6	; 10
 57e:	55 9a       	sbi	0x0a, 5	; 10
 580:	51 9a       	sbi	0x0a, 1	; 10
 582:	39 9a       	sbi	0x07, 1	; 7
 584:	52 9a       	sbi	0x0a, 2	; 10
 586:	23 9a       	sbi	0x04, 3	; 4
 588:	3f 9a       	sbi	0x07, 7	; 7
 58a:	24 9a       	sbi	0x04, 4	; 4
 58c:	25 9a       	sbi	0x04, 5	; 4
 58e:	50 9a       	sbi	0x0a, 0	; 10
 590:	26 9a       	sbi	0x04, 6	; 4
 592:	38 9a       	sbi	0x07, 0	; 7
 594:	22 9a       	sbi	0x04, 2	; 4
 596:	3c 9a       	sbi	0x07, 4	; 7
 598:	3d 98       	cbi	0x07, 5	; 7
 59a:	57 98       	cbi	0x0a, 7	; 10
 59c:	08 95       	ret

0000059e <Error_Handler>:
 59e:	08 95       	ret

000005a0 <LVSetDegree>:
			break;
	}
}
void LVSetDegree(uint8_t Addr, uint8_t angle) //set {LV} to {degree}
{
	switch (Addr)
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	11 f1       	breq	.+68     	; 0x5e8 <LVSetDegree+0x48>
 5a4:	18 f4       	brcc	.+6      	; 0x5ac <LVSetDegree+0xc>
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	39 f0       	breq	.+14     	; 0x5b8 <LVSetDegree+0x18>
 5aa:	08 95       	ret
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	a1 f1       	breq	.+104    	; 0x618 <LVSetDegree+0x78>
 5b0:	84 30       	cpi	r24, 0x04	; 4
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <LVSetDegree+0x16>
 5b4:	49 c0       	rjmp	.+146    	; 0x648 <LVSetDegree+0xa8>
 5b6:	08 95       	ret
	{
		case LV_1_ADDR:
			LV_stepToGo[0] = (angle - LV_currentAngle[0]) * 35.555555555; //  64*200/360 = 35.55555555555
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LV_currentAngle>
 5be:	68 1b       	sub	r22, r24
 5c0:	71 09       	sbc	r23, r1
 5c2:	07 2e       	mov	r0, r23
 5c4:	00 0c       	add	r0, r0
 5c6:	88 0b       	sbc	r24, r24
 5c8:	99 0b       	sbc	r25, r25
 5ca:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatsisf>
 5ce:	24 ee       	ldi	r18, 0xE4	; 228
 5d0:	38 e3       	ldi	r19, 0x38	; 56
 5d2:	4e e0       	ldi	r20, 0x0E	; 14
 5d4:	52 e4       	ldi	r21, 0x42	; 66
 5d6:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 5da:	0e 94 54 06 	call	0xca8	; 0xca8 <__fixsfsi>
 5de:	70 93 14 01 	sts	0x0114, r23	; 0x800114 <LV_stepToGo+0x1>
 5e2:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <LV_stepToGo>
			break;
 5e6:	08 95       	ret
		case LV_2_ADDR:
			LV_stepToGo[1] = (angle - LV_currentAngle[1]) * 35.555555555; //  64*200/360 = 35.55555555555
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <LV_currentAngle+0x1>
 5ee:	68 1b       	sub	r22, r24
 5f0:	71 09       	sbc	r23, r1
 5f2:	07 2e       	mov	r0, r23
 5f4:	00 0c       	add	r0, r0
 5f6:	88 0b       	sbc	r24, r24
 5f8:	99 0b       	sbc	r25, r25
 5fa:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatsisf>
 5fe:	24 ee       	ldi	r18, 0xE4	; 228
 600:	38 e3       	ldi	r19, 0x38	; 56
 602:	4e e0       	ldi	r20, 0x0E	; 14
 604:	52 e4       	ldi	r21, 0x42	; 66
 606:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 60a:	0e 94 54 06 	call	0xca8	; 0xca8 <__fixsfsi>
 60e:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <LV_stepToGo+0x3>
 612:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <LV_stepToGo+0x2>
			break;
 616:	08 95       	ret
		case LV_3_ADDR:
			LV_stepToGo[2] = (angle - LV_currentAngle[2]) * 35.555555555; //  64*200/360 = 35.55555555555
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <LV_currentAngle+0x2>
 61e:	68 1b       	sub	r22, r24
 620:	71 09       	sbc	r23, r1
 622:	07 2e       	mov	r0, r23
 624:	00 0c       	add	r0, r0
 626:	88 0b       	sbc	r24, r24
 628:	99 0b       	sbc	r25, r25
 62a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatsisf>
 62e:	24 ee       	ldi	r18, 0xE4	; 228
 630:	38 e3       	ldi	r19, 0x38	; 56
 632:	4e e0       	ldi	r20, 0x0E	; 14
 634:	52 e4       	ldi	r21, 0x42	; 66
 636:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 63a:	0e 94 54 06 	call	0xca8	; 0xca8 <__fixsfsi>
 63e:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <LV_stepToGo+0x5>
 642:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <LV_stepToGo+0x4>
			break;
 646:	08 95       	ret
		case LV_4_ADDR:
			LV_stepToGo[3] = (angle - LV_currentAngle[3]) * 35.555555555; //  64*200/360 = 35.55555555555
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LV_currentAngle+0x3>
 64e:	68 1b       	sub	r22, r24
 650:	71 09       	sbc	r23, r1
 652:	07 2e       	mov	r0, r23
 654:	00 0c       	add	r0, r0
 656:	88 0b       	sbc	r24, r24
 658:	99 0b       	sbc	r25, r25
 65a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatsisf>
 65e:	24 ee       	ldi	r18, 0xE4	; 228
 660:	38 e3       	ldi	r19, 0x38	; 56
 662:	4e e0       	ldi	r20, 0x0E	; 14
 664:	52 e4       	ldi	r21, 0x42	; 66
 666:	0e 94 f0 06 	call	0xde0	; 0xde0 <__mulsf3>
 66a:	0e 94 54 06 	call	0xca8	; 0xca8 <__fixsfsi>
 66e:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <LV_stepToGo+0x7>
 672:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <LV_stepToGo+0x6>
 676:	08 95       	ret

00000678 <CANhandle>:
{

}
void CANhandle(void)
{
	if( CAN_available() )
 678:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 67c:	85 ff       	sbrs	r24, 5
 67e:	13 c0       	rjmp	.+38     	; 0x6a6 <CANhandle+0x2e>
	{
		CANRead();
 680:	0e 94 4b 05 	call	0xa96	; 0xa96 <CANRead>
		if (CAN_MSG[0] == CAN_MSG[1])
 684:	eb e1       	ldi	r30, 0x1B	; 27
 686:	f1 e0       	ldi	r31, 0x01	; 1
 688:	60 81       	ld	r22, Z
 68a:	81 81       	ldd	r24, Z+1	; 0x01
 68c:	68 13       	cpse	r22, r24
 68e:	0b c0       	rjmp	.+22     	; 0x6a6 <CANhandle+0x2e>
		{
			if (CAN_MSG[1] == CAN_MSG[2])
 690:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <CAN_MSG+0x2>
 694:	68 13       	cpse	r22, r24
 696:	07 c0       	rjmp	.+14     	; 0x6a6 <CANhandle+0x2e>
			{
				LVSetDegree(0x01,CAN_MSG[0]);
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <LVSetDegree>
				LV_currentAngle[0] = CAN_MSG[0];
 69e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <CAN_MSG>
 6a2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <LV_currentAngle>
 6a6:	08 95       	ret

000006a8 <readOPB>:
	}

}
uint8_t readOPB(uint8_t num)
{
	switch(num)
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	49 f0       	breq	.+18     	; 0x6be <readOPB+0x16>
 6ac:	28 f0       	brcs	.+10     	; 0x6b8 <readOPB+0x10>
 6ae:	82 30       	cpi	r24, 0x02	; 2
 6b0:	49 f0       	breq	.+18     	; 0x6c4 <readOPB+0x1c>
 6b2:	83 30       	cpi	r24, 0x03	; 3
 6b4:	51 f0       	breq	.+20     	; 0x6ca <readOPB+0x22>
 6b6:	0b c0       	rjmp	.+22     	; 0x6ce <readOPB+0x26>
	{
		case 0:
		GPIO_LOW(multA);
 6b8:	2a 98       	cbi	0x05, 2	; 5
		GPIO_LOW(multB);
 6ba:	44 98       	cbi	0x08, 4	; 8
		break;
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <readOPB+0x26>
		case 1:
		GPIO_HIGH(multA);
 6be:	2a 9a       	sbi	0x05, 2	; 5
		GPIO_LOW(multB);
 6c0:	44 98       	cbi	0x08, 4	; 8
		break;
 6c2:	05 c0       	rjmp	.+10     	; 0x6ce <readOPB+0x26>
		case 2:
		GPIO_LOW(multA);
 6c4:	2a 98       	cbi	0x05, 2	; 5
		GPIO_HIGH(multB);
 6c6:	44 9a       	sbi	0x08, 4	; 8
		break;
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <readOPB+0x26>
		case 3:
		GPIO_HIGH(multA);
 6ca:	2a 9a       	sbi	0x05, 2	; 5
		GPIO_HIGH(multB);
 6cc:	44 9a       	sbi	0x08, 4	; 8
		break;
	}
	bool A = GPIO_DREAD(phaseA);
 6ce:	26 b1       	in	r18, 0x06	; 6
	bool B = GPIO_DREAD(phaseB);
 6d0:	89 b1       	in	r24, 0x09	; 9
 6d2:	80 78       	andi	r24, 0x80	; 128
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
	if (A)
 6da:	25 ff       	sbrs	r18, 5
 6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <readOPB+0x3e>
	{
		if (B)  //30~60
 6de:	89 2b       	or	r24, r25
 6e0:	31 f4       	brne	.+12     	; 0x6ee <readOPB+0x46>
			return PLATE_30_60;
		else  //0~30
			return PLATE_0_30;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	08 95       	ret
	}
	else
	{
		if (B)  //60~90
 6e6:	89 2b       	or	r24, r25
 6e8:	21 f4       	brne	.+8      	; 0x6f2 <readOPB+0x4a>
			return PLATE_60_90;
		else  //90~360
			return PLATE_90_360;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret
	bool A = GPIO_DREAD(phaseA);
	bool B = GPIO_DREAD(phaseB);
	if (A)
	{
		if (B)  //30~60
			return PLATE_30_60;
 6ee:	82 e0       	ldi	r24, 0x02	; 2
 6f0:	08 95       	ret
			return PLATE_0_30;
	}
	else
	{
		if (B)  //60~90
			return PLATE_60_90;
 6f2:	83 e0       	ldi	r24, 0x03	; 3
		else  //90~360
			return PLATE_90_360;
	}

}
 6f4:	08 95       	ret

000006f6 <stepOutput>:
void stepOutput(uint8_t num, bool output)
{
	if(output)
 6f6:	66 23       	and	r22, r22
 6f8:	81 f0       	breq	.+32     	; 0x71a <stepOutput+0x24>
	{
		switch (num)
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	41 f0       	breq	.+16     	; 0x70e <stepOutput+0x18>
 6fe:	28 f0       	brcs	.+10     	; 0x70a <stepOutput+0x14>
 700:	82 30       	cpi	r24, 0x02	; 2
 702:	39 f0       	breq	.+14     	; 0x712 <stepOutput+0x1c>
 704:	83 30       	cpi	r24, 0x03	; 3
 706:	39 f0       	breq	.+14     	; 0x716 <stepOutput+0x20>
 708:	08 95       	ret
		{
			case 0:
			GPIO_HIGH(stepPin1);
 70a:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 70c:	08 95       	ret
			case 1:
			GPIO_HIGH(stepPin2);
 70e:	59 9a       	sbi	0x0b, 1	; 11
			break;
 710:	08 95       	ret
			case 2:
			GPIO_HIGH(stepPin3);
 712:	2b 9a       	sbi	0x05, 3	; 5
			break;
 714:	08 95       	ret
			case 3:
			GPIO_HIGH(stepPin4);
 716:	2d 9a       	sbi	0x05, 5	; 5
			break;
 718:	08 95       	ret
		}
	}
	else
	{
		switch (num)
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	41 f0       	breq	.+16     	; 0x72e <stepOutput+0x38>
 71e:	28 f0       	brcs	.+10     	; 0x72a <stepOutput+0x34>
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	39 f0       	breq	.+14     	; 0x732 <stepOutput+0x3c>
 724:	83 30       	cpi	r24, 0x03	; 3
 726:	39 f0       	breq	.+14     	; 0x736 <stepOutput+0x40>
 728:	08 95       	ret
		{
			case 0:
			GPIO_LOW(stepPin1);
 72a:	5c 98       	cbi	0x0b, 4	; 11
			break;
 72c:	08 95       	ret
			case 1:
			GPIO_LOW(stepPin2);
 72e:	59 98       	cbi	0x0b, 1	; 11
			break;
 730:	08 95       	ret
			case 2:
			GPIO_LOW(stepPin3);
 732:	2b 98       	cbi	0x05, 3	; 5
			break;
 734:	08 95       	ret
			case 3:
			GPIO_LOW(stepPin4);
 736:	2d 98       	cbi	0x05, 5	; 5
 738:	08 95       	ret

0000073a <enOutput>:
		}
	}
}
void enOutput(uint8_t num, bool output)
{
	if(output)
 73a:	66 23       	and	r22, r22
 73c:	81 f0       	breq	.+32     	; 0x75e <enOutput+0x24>
	{
		switch (num)
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	41 f0       	breq	.+16     	; 0x752 <enOutput+0x18>
 742:	28 f0       	brcs	.+10     	; 0x74e <enOutput+0x14>
 744:	82 30       	cpi	r24, 0x02	; 2
 746:	39 f0       	breq	.+14     	; 0x756 <enOutput+0x1c>
 748:	83 30       	cpi	r24, 0x03	; 3
 74a:	39 f0       	breq	.+14     	; 0x75a <enOutput+0x20>
 74c:	08 95       	ret
		{
			case 0:
			GPIO_HIGH(enPin1);
 74e:	5d 9a       	sbi	0x0b, 5	; 11
			break;
 750:	08 95       	ret
			case 1:
			GPIO_HIGH(enPin2);
 752:	5a 9a       	sbi	0x0b, 2	; 11
			break;
 754:	08 95       	ret
			case 2:
			GPIO_HIGH(enPin3);
 756:	2c 9a       	sbi	0x05, 4	; 5
			break;
 758:	08 95       	ret
			case 3:
			GPIO_HIGH(enPin4);
 75a:	2e 9a       	sbi	0x05, 6	; 5
			break;
 75c:	08 95       	ret
		}
	}
	else
	{
		switch (num)
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	41 f0       	breq	.+16     	; 0x772 <enOutput+0x38>
 762:	28 f0       	brcs	.+10     	; 0x76e <enOutput+0x34>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	39 f0       	breq	.+14     	; 0x776 <enOutput+0x3c>
 768:	83 30       	cpi	r24, 0x03	; 3
 76a:	39 f0       	breq	.+14     	; 0x77a <enOutput+0x40>
 76c:	08 95       	ret
		{
			case 0:
			GPIO_LOW(enPin1);
 76e:	5d 98       	cbi	0x0b, 5	; 11
			break;
 770:	08 95       	ret
			case 1:
			GPIO_LOW(enPin2);
 772:	5a 98       	cbi	0x0b, 2	; 11
			break;
 774:	08 95       	ret
			case 2:
			GPIO_LOW(enPin3);
 776:	2c 98       	cbi	0x05, 4	; 5
			break;
 778:	08 95       	ret
			case 3:
			GPIO_LOW(enPin4);
 77a:	2e 98       	cbi	0x05, 6	; 5
 77c:	08 95       	ret

0000077e <dirOutput>:
		}
	}
}
void dirOutput(uint8_t num, bool output)
{
	if(output)
 77e:	66 23       	and	r22, r22
 780:	81 f0       	breq	.+32     	; 0x7a2 <dirOutput+0x24>
	{
		switch (num)
 782:	81 30       	cpi	r24, 0x01	; 1
 784:	41 f0       	breq	.+16     	; 0x796 <dirOutput+0x18>
 786:	28 f0       	brcs	.+10     	; 0x792 <dirOutput+0x14>
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	39 f0       	breq	.+14     	; 0x79a <dirOutput+0x1c>
 78c:	83 30       	cpi	r24, 0x03	; 3
 78e:	39 f0       	breq	.+14     	; 0x79e <dirOutput+0x20>
 790:	08 95       	ret
		{
			case 0:
			GPIO_HIGH(dirPin1);
 792:	5e 9a       	sbi	0x0b, 6	; 11
			break;
 794:	08 95       	ret
			case 1:
			GPIO_HIGH(dirPin2);
 796:	41 9a       	sbi	0x08, 1	; 8
			break;
 798:	08 95       	ret
			case 2:
			GPIO_HIGH(dirPin3);
 79a:	47 9a       	sbi	0x08, 7	; 8
			break;
 79c:	08 95       	ret
			case 3:
			GPIO_HIGH(dirPin4);
 79e:	58 9a       	sbi	0x0b, 0	; 11
			break;
 7a0:	08 95       	ret
		}
	}
	else
	{
		switch (num)
 7a2:	81 30       	cpi	r24, 0x01	; 1
 7a4:	41 f0       	breq	.+16     	; 0x7b6 <dirOutput+0x38>
 7a6:	28 f0       	brcs	.+10     	; 0x7b2 <dirOutput+0x34>
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	39 f0       	breq	.+14     	; 0x7ba <dirOutput+0x3c>
 7ac:	83 30       	cpi	r24, 0x03	; 3
 7ae:	39 f0       	breq	.+14     	; 0x7be <dirOutput+0x40>
 7b0:	08 95       	ret
		{
			case 0:
			GPIO_LOW(dirPin1);
 7b2:	5e 98       	cbi	0x0b, 6	; 11
			break;
 7b4:	08 95       	ret
			case 1:
			GPIO_LOW(dirPin2);
 7b6:	41 98       	cbi	0x08, 1	; 8
			break;
 7b8:	08 95       	ret
			case 2:
			GPIO_LOW(dirPin3);
 7ba:	47 98       	cbi	0x08, 7	; 8
			break;
 7bc:	08 95       	ret
			case 3:
			GPIO_LOW(dirPin4);
 7be:	58 98       	cbi	0x0b, 0	; 11
 7c0:	08 95       	ret

000007c2 <LVhandle>:
			break;
	}
	
}
void LVhandle(void)
{
 7c2:	2f 92       	push	r2
 7c4:	3f 92       	push	r3
 7c6:	4f 92       	push	r4
 7c8:	5f 92       	push	r5
 7ca:	6f 92       	push	r6
 7cc:	7f 92       	push	r7
 7ce:	8f 92       	push	r8
 7d0:	9f 92       	push	r9
 7d2:	af 92       	push	r10
 7d4:	bf 92       	push	r11
 7d6:	cf 92       	push	r12
 7d8:	df 92       	push	r13
 7da:	ef 92       	push	r14
 7dc:	ff 92       	push	r15
 7de:	0f 93       	push	r16
 7e0:	1f 93       	push	r17
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	cb e0       	ldi	r28, 0x0B	; 11
 7e8:	d1 e0       	ldi	r29, 0x01	; 1
 7ea:	0f 2e       	mov	r0, r31
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	8f 2e       	mov	r8, r31
 7f0:	f1 e0       	ldi	r31, 0x01	; 1
 7f2:	9f 2e       	mov	r9, r31
 7f4:	f0 2d       	mov	r31, r0
 7f6:	0f 2e       	mov	r0, r31
 7f8:	f3 e1       	ldi	r31, 0x13	; 19
 7fa:	ef 2e       	mov	r14, r31
 7fc:	f1 e0       	ldi	r31, 0x01	; 1
 7fe:	ff 2e       	mov	r15, r31
 800:	f0 2d       	mov	r31, r0
 802:	87 01       	movw	r16, r14
 804:	51 2c       	mov	r5, r1
					LV_POS_RST_flag[i] = 2;
				else								//angle = 0~90
					LV_POS_RST_flag[i] = 3;
				break;
			case 2:
				LV_stepToGo[i] = 35;				//rotates 1 degree toward 360
 806:	0f 2e       	mov	r0, r31
 808:	f3 e2       	ldi	r31, 0x23	; 35
 80a:	af 2e       	mov	r10, r31
 80c:	b1 2c       	mov	r11, r1
 80e:	f0 2d       	mov	r31, r0
				if(readOPB(i) != PLATE_90_360)
				{
					LV_stepToGo[i] = 0;
					LV_POS_RST_flag[i] = 4;
 810:	68 94       	set
 812:	33 24       	eor	r3, r3
 814:	32 f8       	bld	r3, 2
				}
				break;
			case 3:
				LV_stepToGo[i] = -35;					//rotates 1 degree toward 0
 816:	0f 2e       	mov	r0, r31
 818:	fd ed       	ldi	r31, 0xDD	; 221
 81a:	6f 2e       	mov	r6, r31
 81c:	77 24       	eor	r7, r7
 81e:	7a 94       	dec	r7
 820:	f0 2d       	mov	r31, r0
					LV_stepToGo[i] = 0;
					LV_POS_RST_flag[i] = 4;
				}
				break;
			case 4:									//reset pos done
				LV_state[i] = state_FTRN;
 822:	0f 2e       	mov	r0, r31
 824:	fb eb       	ldi	r31, 0xBB	; 187
 826:	4f 2e       	mov	r4, r31
 828:	f0 2d       	mov	r31, r0
				break;
			case 1:									//PRST CMD is sent, check current POS
				if (readOPB(i) == PLATE_90_360)		//angle = 90~360
					LV_POS_RST_flag[i] = 2;
				else								//angle = 0~90
					LV_POS_RST_flag[i] = 3;
 82a:	0f 2e       	mov	r0, r31
 82c:	f3 e0       	ldi	r31, 0x03	; 3
 82e:	2f 2e       	mov	r2, r31
 830:	f0 2d       	mov	r31, r0
}
void LVhandle(void)
{
	for(int i = 0; i<4; i++)	//pos reset handle
	{
		switch (LV_POS_RST_flag[i])
 832:	88 81       	ld	r24, Y
 834:	82 30       	cpi	r24, 0x02	; 2
 836:	99 f0       	breq	.+38     	; 0x85e <LVhandle+0x9c>
 838:	18 f4       	brcc	.+6      	; 0x840 <LVhandle+0x7e>
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	31 f0       	breq	.+12     	; 0x84a <LVhandle+0x88>
 83e:	2b c0       	rjmp	.+86     	; 0x896 <LVhandle+0xd4>
 840:	83 30       	cpi	r24, 0x03	; 3
 842:	d1 f0       	breq	.+52     	; 0x878 <LVhandle+0xb6>
 844:	84 30       	cpi	r24, 0x04	; 4
 846:	29 f1       	breq	.+74     	; 0x892 <LVhandle+0xd0>
 848:	26 c0       	rjmp	.+76     	; 0x896 <LVhandle+0xd4>
		{
			case 0:									//no need to reset
				break;
			case 1:									//PRST CMD is sent, check current POS
				if (readOPB(i) == PLATE_90_360)		//angle = 90~360
 84a:	85 2d       	mov	r24, r5
 84c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <readOPB>
 850:	81 11       	cpse	r24, r1
 852:	03 c0       	rjmp	.+6      	; 0x85a <LVhandle+0x98>
					LV_POS_RST_flag[i] = 2;
 854:	82 e0       	ldi	r24, 0x02	; 2
 856:	88 83       	st	Y, r24
 858:	1e c0       	rjmp	.+60     	; 0x896 <LVhandle+0xd4>
				else								//angle = 0~90
					LV_POS_RST_flag[i] = 3;
 85a:	28 82       	st	Y, r2
 85c:	1c c0       	rjmp	.+56     	; 0x896 <LVhandle+0xd4>
				break;
			case 2:
				LV_stepToGo[i] = 35;				//rotates 1 degree toward 360
 85e:	f8 01       	movw	r30, r16
 860:	b1 82       	std	Z+1, r11	; 0x01
 862:	a0 82       	st	Z, r10
				if(readOPB(i) != PLATE_90_360)
 864:	85 2d       	mov	r24, r5
 866:	0e 94 54 03 	call	0x6a8	; 0x6a8 <readOPB>
 86a:	88 23       	and	r24, r24
 86c:	a1 f0       	breq	.+40     	; 0x896 <LVhandle+0xd4>
				{
					LV_stepToGo[i] = 0;
 86e:	f8 01       	movw	r30, r16
 870:	11 82       	std	Z+1, r1	; 0x01
 872:	10 82       	st	Z, r1
					LV_POS_RST_flag[i] = 4;
 874:	38 82       	st	Y, r3
 876:	0f c0       	rjmp	.+30     	; 0x896 <LVhandle+0xd4>
				}
				break;
			case 3:
				LV_stepToGo[i] = -35;					//rotates 1 degree toward 0
 878:	f8 01       	movw	r30, r16
 87a:	71 82       	std	Z+1, r7	; 0x01
 87c:	60 82       	st	Z, r6
				if(readOPB(i) == PLATE_90_360)
 87e:	85 2d       	mov	r24, r5
 880:	0e 94 54 03 	call	0x6a8	; 0x6a8 <readOPB>
 884:	81 11       	cpse	r24, r1
 886:	07 c0       	rjmp	.+14     	; 0x896 <LVhandle+0xd4>
				{
					LV_stepToGo[i] = 0;
 888:	f8 01       	movw	r30, r16
 88a:	11 82       	std	Z+1, r1	; 0x01
 88c:	10 82       	st	Z, r1
					LV_POS_RST_flag[i] = 4;
 88e:	38 82       	st	Y, r3
 890:	02 c0       	rjmp	.+4      	; 0x896 <LVhandle+0xd4>
				}
				break;
			case 4:									//reset pos done
				LV_state[i] = state_FTRN;
 892:	f4 01       	movw	r30, r8
 894:	40 82       	st	Z, r4
 896:	21 96       	adiw	r28, 0x01	; 1
 898:	ff ef       	ldi	r31, 0xFF	; 255
 89a:	8f 1a       	sub	r8, r31
 89c:	9f 0a       	sbc	r9, r31
 89e:	0e 5f       	subi	r16, 0xFE	; 254
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	53 94       	inc	r5
	}
	
}
void LVhandle(void)
{
	for(int i = 0; i<4; i++)	//pos reset handle
 8a4:	84 e0       	ldi	r24, 0x04	; 4
 8a6:	58 12       	cpse	r5, r24
 8a8:	c4 cf       	rjmp	.-120    	; 0x832 <LVhandle+0x70>
				break;
		}
		
	}

	if (_Control_Flag_0 >= 5 ) //about 28 degree per sec
 8aa:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_Control_Flag_0>
 8ae:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_Control_Flag_0+0x1>
 8b2:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_Control_Flag_0+0x2>
 8b6:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_Control_Flag_0+0x3>
 8ba:	05 97       	sbiw	r24, 0x05	; 5
 8bc:	a1 05       	cpc	r26, r1
 8be:	b1 05       	cpc	r27, r1
 8c0:	08 f4       	brcc	.+2      	; 0x8c4 <LVhandle+0x102>
 8c2:	5c c0       	rjmp	.+184    	; 0x97c <LVhandle+0x1ba>
	{
		if (LV_HL) //
 8c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LV_HL>
 8c8:	88 23       	and	r24, r24
 8ca:	09 f4       	brne	.+2      	; 0x8ce <LVhandle+0x10c>
 8cc:	44 c0       	rjmp	.+136    	; 0x956 <LVhandle+0x194>
 8ce:	c0 e0       	ldi	r28, 0x00	; 0
		{
			for(int i = 0; i<4; i++)
			{
				if (LV_stepToGo[i]>0)
 8d0:	f7 01       	movw	r30, r14
 8d2:	80 81       	ld	r24, Z
 8d4:	91 81       	ldd	r25, Z+1	; 0x01
 8d6:	18 16       	cp	r1, r24
 8d8:	19 06       	cpc	r1, r25
 8da:	9c f4       	brge	.+38     	; 0x902 <LVhandle+0x140>
				{
					enOutput(i, false);
 8dc:	60 e0       	ldi	r22, 0x00	; 0
 8de:	8c 2f       	mov	r24, r28
 8e0:	0e 94 9d 03 	call	0x73a	; 0x73a <enOutput>
					dirOutput(i, true);
 8e4:	61 e0       	ldi	r22, 0x01	; 1
 8e6:	8c 2f       	mov	r24, r28
 8e8:	0e 94 bf 03 	call	0x77e	; 0x77e <dirOutput>
					stepOutput(i, true);
 8ec:	61 e0       	ldi	r22, 0x01	; 1
 8ee:	8c 2f       	mov	r24, r28
 8f0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <stepOutput>
					LV_stepToGo[i]--;
 8f4:	f7 01       	movw	r30, r14
 8f6:	80 81       	ld	r24, Z
 8f8:	91 81       	ldd	r25, Z+1	; 0x01
 8fa:	01 97       	sbiw	r24, 0x01	; 1
 8fc:	91 83       	std	Z+1, r25	; 0x01
 8fe:	80 83       	st	Z, r24
 900:	19 c0       	rjmp	.+50     	; 0x934 <LVhandle+0x172>
				}
				else if (LV_stepToGo[i]<0)
 902:	99 23       	and	r25, r25
 904:	9c f4       	brge	.+38     	; 0x92c <LVhandle+0x16a>
				{
					enOutput(i, false);
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	8c 2f       	mov	r24, r28
 90a:	0e 94 9d 03 	call	0x73a	; 0x73a <enOutput>
					dirOutput(i, false);
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	8c 2f       	mov	r24, r28
 912:	0e 94 bf 03 	call	0x77e	; 0x77e <dirOutput>
					stepOutput(i, true);
 916:	61 e0       	ldi	r22, 0x01	; 1
 918:	8c 2f       	mov	r24, r28
 91a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <stepOutput>
					LV_stepToGo[i]++;
 91e:	f7 01       	movw	r30, r14
 920:	80 81       	ld	r24, Z
 922:	91 81       	ldd	r25, Z+1	; 0x01
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	91 83       	std	Z+1, r25	; 0x01
 928:	80 83       	st	Z, r24
 92a:	04 c0       	rjmp	.+8      	; 0x934 <LVhandle+0x172>
				}
				else //LV_stepToGo[i] = 0
				{
					enOutput(i, true);
 92c:	61 e0       	ldi	r22, 0x01	; 1
 92e:	8c 2f       	mov	r24, r28
 930:	0e 94 9d 03 	call	0x73a	; 0x73a <enOutput>
 934:	f2 e0       	ldi	r31, 0x02	; 2
 936:	ef 0e       	add	r14, r31
 938:	f1 1c       	adc	r15, r1
 93a:	cf 5f       	subi	r28, 0xFF	; 255

	if (_Control_Flag_0 >= 5 ) //about 28 degree per sec
	{
		if (LV_HL) //
		{
			for(int i = 0; i<4; i++)
 93c:	c4 30       	cpi	r28, 0x04	; 4
 93e:	41 f6       	brne	.-112    	; 0x8d0 <LVhandle+0x10e>
				else //LV_stepToGo[i] = 0
				{
					enOutput(i, true);
				}
			}
			CCF0();
 940:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 944:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 948:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 94c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
			LV_HL = false;
 950:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <LV_HL>
 954:	13 c0       	rjmp	.+38     	; 0x97c <LVhandle+0x1ba>
 956:	c0 e0       	ldi	r28, 0x00	; 0
		}
		else
		{
			for(int i = 0; i<4; i++)
			{
				stepOutput(i, false);
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	8c 2f       	mov	r24, r28
 95c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <stepOutput>
 960:	cf 5f       	subi	r28, 0xFF	; 255
			CCF0();
			LV_HL = false;
		}
		else
		{
			for(int i = 0; i<4; i++)
 962:	c4 30       	cpi	r28, 0x04	; 4
 964:	c9 f7       	brne	.-14     	; 0x958 <LVhandle+0x196>
			{
				stepOutput(i, false);
			}
			CCF0();
 966:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 96a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 96e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 972:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
			LV_HL = true;
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LV_HL>
		}
	}

}
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	1f 91       	pop	r17
 982:	0f 91       	pop	r16
 984:	ff 90       	pop	r15
 986:	ef 90       	pop	r14
 988:	df 90       	pop	r13
 98a:	cf 90       	pop	r12
 98c:	bf 90       	pop	r11
 98e:	af 90       	pop	r10
 990:	9f 90       	pop	r9
 992:	8f 90       	pop	r8
 994:	7f 90       	pop	r7
 996:	6f 90       	pop	r6
 998:	5f 90       	pop	r5
 99a:	4f 90       	pop	r4
 99c:	3f 90       	pop	r3
 99e:	2f 90       	pop	r2
 9a0:	08 95       	ret

000009a2 <loop>:
}

void loop()
{
	
	wdt_reset();
 9a2:	a8 95       	wdr
	
	CANhandle();
 9a4:	0e 94 3c 03 	call	0x678	; 0x678 <CANhandle>
	//LV_stepToGo[0] = 100;
	LVhandle();
 9a8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LVhandle>
 9ac:	08 95       	ret

000009ae <CANSETID>:
	CANCDMOB |= (1<<CONMOB1|1<<CONMOB0);
	//delay(1);
	CANMSG=0x00;
	CANSTMOB &= ~(1 << RXOK);
	return temp;
}
 9ae:	0f 93       	push	r16
 9b0:	1f 93       	push	r17
 9b2:	e0 ef       	ldi	r30, 0xF0	; 240
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	10 82       	st	Z, r1
 9b8:	11 82       	std	Z+1, r1	; 0x01
 9ba:	12 82       	std	Z+2, r1	; 0x02
 9bc:	13 82       	std	Z+3, r1	; 0x03
 9be:	00 81       	ld	r16, Z
 9c0:	11 81       	ldd	r17, Z+1	; 0x01
 9c2:	22 81       	ldd	r18, Z+2	; 0x02
 9c4:	33 81       	ldd	r19, Z+3	; 0x03
 9c6:	ab 01       	movw	r20, r22
 9c8:	bc 01       	movw	r22, r24
 9ca:	03 2e       	mov	r0, r19
 9cc:	35 e1       	ldi	r19, 0x15	; 21
 9ce:	44 0f       	add	r20, r20
 9d0:	55 1f       	adc	r21, r21
 9d2:	66 1f       	adc	r22, r22
 9d4:	77 1f       	adc	r23, r23
 9d6:	3a 95       	dec	r19
 9d8:	d1 f7       	brne	.-12     	; 0x9ce <CANSETID+0x20>
 9da:	30 2d       	mov	r19, r0
 9dc:	db 01       	movw	r26, r22
 9de:	ca 01       	movw	r24, r20
 9e0:	80 2b       	or	r24, r16
 9e2:	91 2b       	or	r25, r17
 9e4:	a2 2b       	or	r26, r18
 9e6:	b3 2b       	or	r27, r19
 9e8:	80 83       	st	Z, r24
 9ea:	91 83       	std	Z+1, r25	; 0x01
 9ec:	a2 83       	std	Z+2, r26	; 0x02
 9ee:	b3 83       	std	Z+3, r27	; 0x03
 9f0:	1f 91       	pop	r17
 9f2:	0f 91       	pop	r16
 9f4:	08 95       	ret

000009f6 <CAN_initialize>:
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <CANRXID>
 9fe:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <CANRXID+0x1>
 a02:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <CANRXID+0x2>
 a06:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <CANRXID+0x3>
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	cd ee       	ldi	r28, 0xED	; 237
 a14:	d0 e0       	ldi	r29, 0x00	; 0
 a16:	af ee       	ldi	r26, 0xEF	; 239
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	ee ee       	ldi	r30, 0xEE	; 238
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	98 2f       	mov	r25, r24
 a20:	92 95       	swap	r25
 a22:	90 7f       	andi	r25, 0xF0	; 240
 a24:	98 83       	st	Y, r25
 a26:	1c 92       	st	X, r1
 a28:	10 82       	st	Z, r1
 a2a:	8f 5f       	subi	r24, 0xFF	; 255
 a2c:	86 30       	cpi	r24, 0x06	; 6
 a2e:	b9 f7       	brne	.-18     	; 0xa1e <CAN_initialize+0x28>
 a30:	e8 ed       	ldi	r30, 0xD8	; 216
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	80 81       	ld	r24, Z
 a36:	10 82       	st	Z, r1
 a38:	80 81       	ld	r24, Z
 a3a:	82 60       	ori	r24, 0x02	; 2
 a3c:	80 83       	st	Z, r24
 a3e:	ed ee       	ldi	r30, 0xED	; 237
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	10 82       	st	Z, r1
 a44:	80 81       	ld	r24, Z
 a46:	87 7f       	andi	r24, 0xF7	; 247
 a48:	80 83       	st	Z, r24
 a4a:	88 e8       	ldi	r24, 0x88	; 136
 a4c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 a50:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a5a:	8c e0       	ldi	r24, 0x0C	; 12
 a5c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 a60:	87 e3       	ldi	r24, 0x37	; 55
 a62:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 a66:	8f ef       	ldi	r24, 0xFF	; 255
 a68:	9f ef       	ldi	r25, 0xFF	; 255
 a6a:	dc 01       	movw	r26, r24
 a6c:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 a70:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 a74:	a0 93 f6 00 	sts	0x00F6, r26	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 a78:	b0 93 f7 00 	sts	0x00F7, r27	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 a7c:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <CANRXID>
 a80:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <CANRXID+0x1>
 a84:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <CANRXID+0x2>
 a88:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <CANRXID+0x3>
 a8c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <CANSETID>
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	08 95       	ret

00000a96 <CANRead>:

void CANRead()
{
	CAN_MSGLEN = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
 a96:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 a9a:	8f 70       	andi	r24, 0x0F	; 15
 a9c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <CAN_MSGLEN>
	CANPAGE &= ~(1<<0);//INDEX to 0
 aa0:	ed ee       	ldi	r30, 0xED	; 237
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	80 81       	ld	r24, Z
 aa6:	8e 7f       	andi	r24, 0xFE	; 254
 aa8:	80 83       	st	Z, r24
	CANPAGE &= ~(1<<1);
 aaa:	80 81       	ld	r24, Z
 aac:	8d 7f       	andi	r24, 0xFD	; 253
 aae:	80 83       	st	Z, r24
	CANPAGE &= ~(1<<2);
 ab0:	80 81       	ld	r24, Z
 ab2:	8b 7f       	andi	r24, 0xFB	; 251
 ab4:	80 83       	st	Z, r24
	for ( int8_t i = 0; i < CAN_MSGLEN; i++ ){
 ab6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <CAN_MSGLEN>
 aba:	12 16       	cp	r1, r18
 abc:	6c f4       	brge	.+26     	; 0xad8 <CANRead+0x42>
 abe:	eb e1       	ldi	r30, 0x1B	; 27
 ac0:	f1 e0       	ldi	r31, 0x01	; 1
 ac2:	21 50       	subi	r18, 0x01	; 1
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	24 5e       	subi	r18, 0xE4	; 228
 ac8:	3e 4f       	sbci	r19, 0xFE	; 254
		CAN_MSG[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
 aca:	aa ef       	ldi	r26, 0xFA	; 250
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	8c 91       	ld	r24, X
 ad0:	81 93       	st	Z+, r24
{
	CAN_MSGLEN = ( CANCDMOB & 0x0F );	// DLC, number of bytes to be received
	CANPAGE &= ~(1<<0);//INDEX to 0
	CANPAGE &= ~(1<<1);
	CANPAGE &= ~(1<<2);
	for ( int8_t i = 0; i < CAN_MSGLEN; i++ ){
 ad2:	e2 17       	cp	r30, r18
 ad4:	f3 07       	cpc	r31, r19
 ad6:	d9 f7       	brne	.-10     	; 0xace <CANRead+0x38>
		CAN_MSG[i] = CANMSG; 		// Get data, INDX auto increments CANMSG
	}

	CANCDMOB = (( 1 << CONMOB1 ) | (0<<CONMOB0));  // Enable Reception 11 bit IDE DLC8
 ad8:	80 e8       	ldi	r24, 0x80	; 128
 ada:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANMSG=0x00;
 ade:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	CANSTMOB &= ~(1 << RXOK);
 ae2:	ee ee       	ldi	r30, 0xEE	; 238
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	80 81       	ld	r24, Z
 ae8:	8f 7d       	andi	r24, 0xDF	; 223
 aea:	80 83       	st	Z, r24
 aec:	08 95       	ret

00000aee <__vector_14>:
*/

volatile boolean LED_state = 1;

ISR(TIMER1_OVF_vect)
{
 aee:	1f 92       	push	r1
 af0:	0f 92       	push	r0
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	0f 92       	push	r0
 af6:	11 24       	eor	r1, r1
 af8:	2f 93       	push	r18
 afa:	3f 93       	push	r19
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
	TCNT1L = CLK1RST&0xFF;
 b00:	88 e8       	ldi	r24, 0x88	; 136
 b02:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCNT1H = (CLK1RST>>8)&0xFF;
 b06:	8a ef       	ldi	r24, 0xFA	; 250
 b08:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	if(LED_state)
 b0c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <LED_state>
 b10:	88 23       	and	r24, r24
 b12:	21 f0       	breq	.+8      	; 0xb1c <__vector_14+0x2e>
	{
		GPIO_HIGH(_PD4);
 b14:	5c 9a       	sbi	0x0b, 4	; 11
		LED_state = 0;
 b16:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LED_state>
 b1a:	04 c0       	rjmp	.+8      	; 0xb24 <__vector_14+0x36>
	}
	else
	{
		GPIO_LOW(_PD4);
 b1c:	5c 98       	cbi	0x0b, 4	; 11
		LED_state = 1;
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <LED_state>
	}
	//Atomic write to 16bit TCNT1
	//TCNT1_sreg = SREG;
	//SREG = TCNT1_sreg;
	PWMCounter++;
 b24:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 b28:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 b2c:	01 96       	adiw	r24, 0x01	; 1
 b2e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <PWMCounter+0x1>
 b32:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <PWMCounter>
	if(PWMCounter >= PWMPeriod)
 b36:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <PWMCounter>
 b3a:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <PWMCounter+0x1>
 b3e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <PWMPeriod>
 b42:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <PWMPeriod+0x1>
 b46:	28 17       	cp	r18, r24
 b48:	39 07       	cpc	r19, r25
 b4a:	2c f1       	brlt	.+74     	; 0xb96 <__vector_14+0xa8>
	{
		if(PWM_Mask & _BV(PWM0)) GPIO_HIGH(PWM_Pin0);
 b4c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b50:	80 fd       	sbrc	r24, 0
 b52:	5e 9a       	sbi	0x0b, 6	; 11
		if(PWM_Mask & _BV(PWM1)) GPIO_HIGH(PWM_Pin1);
 b54:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b58:	81 fd       	sbrc	r24, 1
 b5a:	5f 9a       	sbi	0x0b, 7	; 11
		if(PWM_Mask & _BV(PWM2)) GPIO_HIGH(PWM_Pin2);
 b5c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b60:	82 fd       	sbrc	r24, 2
 b62:	2a 9a       	sbi	0x05, 2	; 5
		if(PWM_Mask & _BV(PWM3)) GPIO_HIGH(PWM_Pin3);
 b64:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b68:	83 fd       	sbrc	r24, 3
 b6a:	44 9a       	sbi	0x08, 4	; 8
		if(PWM_Mask & _BV(PWM4)) GPIO_HIGH(PWM_Pin4);
 b6c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b70:	84 fd       	sbrc	r24, 4
 b72:	45 9a       	sbi	0x08, 5	; 8
		if(PWM_Mask & _BV(PWM5)) GPIO_HIGH(PWM_Pin5);
 b74:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b78:	85 fd       	sbrc	r24, 5
 b7a:	46 9a       	sbi	0x08, 6	; 8
		if(PWM_Mask & _BV(PWM6)) GPIO_HIGH(PWM_Pin6);
 b7c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b80:	86 fd       	sbrc	r24, 6
 b82:	2c 9a       	sbi	0x05, 4	; 5
		if(PWM_Mask & _BV(PWM7)) GPIO_HIGH(PWM_Pin7);
 b84:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b88:	88 23       	and	r24, r24
 b8a:	0c f4       	brge	.+2      	; 0xb8e <__vector_14+0xa0>
 b8c:	47 9a       	sbi	0x08, 7	; 8
		PWMCounter = 0;
 b8e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <PWMCounter+0x1>
 b92:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <PWMCounter>
	}
	if((PWM_Mask & _BV(PWM0)) && PWMCounter >= PWMValue[0]) GPIO_LOW(PWM_Pin0);//PWMLow
 b96:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 b9a:	80 ff       	sbrs	r24, 0
 b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <__vector_14+0xc8>
 b9e:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <PWMValue>
 ba2:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <PWMValue+0x1>
 ba6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 baa:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 bae:	82 17       	cp	r24, r18
 bb0:	93 07       	cpc	r25, r19
 bb2:	0c f0       	brlt	.+2      	; 0xbb6 <__vector_14+0xc8>
 bb4:	5e 98       	cbi	0x0b, 6	; 11
	if((PWM_Mask & _BV(PWM1)) && PWMCounter >= PWMValue[1]) GPIO_LOW(PWM_Pin1);//PWMLow
 bb6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 bba:	81 ff       	sbrs	r24, 1
 bbc:	0c c0       	rjmp	.+24     	; 0xbd6 <__vector_14+0xe8>
 bbe:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <PWMValue+0x2>
 bc2:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <PWMValue+0x3>
 bc6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 bca:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 bce:	82 17       	cp	r24, r18
 bd0:	93 07       	cpc	r25, r19
 bd2:	0c f0       	brlt	.+2      	; 0xbd6 <__vector_14+0xe8>
 bd4:	5f 98       	cbi	0x0b, 7	; 11
	if((PWM_Mask & _BV(PWM2)) && PWMCounter >= PWMValue[2]) GPIO_LOW(PWM_Pin2);//PWMLow
 bd6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 bda:	82 ff       	sbrs	r24, 2
 bdc:	0c c0       	rjmp	.+24     	; 0xbf6 <__vector_14+0x108>
 bde:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <PWMValue+0x4>
 be2:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <PWMValue+0x5>
 be6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 bea:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 bee:	82 17       	cp	r24, r18
 bf0:	93 07       	cpc	r25, r19
 bf2:	0c f0       	brlt	.+2      	; 0xbf6 <__vector_14+0x108>
 bf4:	2a 98       	cbi	0x05, 2	; 5
	if((PWM_Mask & _BV(PWM3)) && PWMCounter >= PWMValue[3]) GPIO_LOW(PWM_Pin3);//PWMLow
 bf6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 bfa:	83 ff       	sbrs	r24, 3
 bfc:	0c c0       	rjmp	.+24     	; 0xc16 <__vector_14+0x128>
 bfe:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <PWMValue+0x6>
 c02:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <PWMValue+0x7>
 c06:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 c0a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 c0e:	82 17       	cp	r24, r18
 c10:	93 07       	cpc	r25, r19
 c12:	0c f0       	brlt	.+2      	; 0xc16 <__vector_14+0x128>
 c14:	44 98       	cbi	0x08, 4	; 8
	if((PWM_Mask & _BV(PWM4)) && PWMCounter >= PWMValue[4]) GPIO_LOW(PWM_Pin4);//PWMLow
 c16:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c1a:	84 ff       	sbrs	r24, 4
 c1c:	0c c0       	rjmp	.+24     	; 0xc36 <__vector_14+0x148>
 c1e:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <PWMValue+0x8>
 c22:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <PWMValue+0x9>
 c26:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 c2a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 c2e:	82 17       	cp	r24, r18
 c30:	93 07       	cpc	r25, r19
 c32:	0c f0       	brlt	.+2      	; 0xc36 <__vector_14+0x148>
 c34:	45 98       	cbi	0x08, 5	; 8
	if((PWM_Mask & _BV(PWM5)) && PWMCounter >= PWMValue[5]) GPIO_LOW(PWM_Pin5);//PWMLow
 c36:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c3a:	85 ff       	sbrs	r24, 5
 c3c:	0c c0       	rjmp	.+24     	; 0xc56 <__vector_14+0x168>
 c3e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <PWMValue+0xa>
 c42:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <PWMValue+0xb>
 c46:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 c4a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 c4e:	82 17       	cp	r24, r18
 c50:	93 07       	cpc	r25, r19
 c52:	0c f0       	brlt	.+2      	; 0xc56 <__vector_14+0x168>
 c54:	46 98       	cbi	0x08, 6	; 8
	if((PWM_Mask & _BV(PWM6)) && PWMCounter >= PWMValue[6]) GPIO_LOW(PWM_Pin6);//PWMLow
 c56:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c5a:	86 ff       	sbrs	r24, 6
 c5c:	0c c0       	rjmp	.+24     	; 0xc76 <__vector_14+0x188>
 c5e:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <PWMValue+0xc>
 c62:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <PWMValue+0xd>
 c66:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 c6a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 c6e:	82 17       	cp	r24, r18
 c70:	93 07       	cpc	r25, r19
 c72:	0c f0       	brlt	.+2      	; 0xc76 <__vector_14+0x188>
 c74:	2c 98       	cbi	0x05, 4	; 5
	if((PWM_Mask & _BV(PWM7)) && PWMCounter >= PWMValue[7]) GPIO_LOW(PWM_Pin7);//PWMLow
 c76:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c7a:	88 23       	and	r24, r24
 c7c:	64 f4       	brge	.+24     	; 0xc96 <__vector_14+0x1a8>
 c7e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <PWMValue+0xe>
 c82:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <PWMValue+0xf>
 c86:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 c8a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 c8e:	82 17       	cp	r24, r18
 c90:	93 07       	cpc	r25, r19
 c92:	0c f0       	brlt	.+2      	; 0xc96 <__vector_14+0x1a8>
 c94:	47 98       	cbi	0x08, 7	; 8
	
}
 c96:	9f 91       	pop	r25
 c98:	8f 91       	pop	r24
 c9a:	3f 91       	pop	r19
 c9c:	2f 91       	pop	r18
 c9e:	0f 90       	pop	r0
 ca0:	0f be       	out	0x3f, r0	; 63
 ca2:	0f 90       	pop	r0
 ca4:	1f 90       	pop	r1
 ca6:	18 95       	reti

00000ca8 <__fixsfsi>:
 ca8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fixunssfsi>
 cac:	68 94       	set
 cae:	b1 11       	cpse	r27, r1
 cb0:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_szero>
 cb4:	08 95       	ret

00000cb6 <__fixunssfsi>:
 cb6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__fp_splitA>
 cba:	88 f0       	brcs	.+34     	; 0xcde <__fixunssfsi+0x28>
 cbc:	9f 57       	subi	r25, 0x7F	; 127
 cbe:	98 f0       	brcs	.+38     	; 0xce6 <__fixunssfsi+0x30>
 cc0:	b9 2f       	mov	r27, r25
 cc2:	99 27       	eor	r25, r25
 cc4:	b7 51       	subi	r27, 0x17	; 23
 cc6:	b0 f0       	brcs	.+44     	; 0xcf4 <__fixunssfsi+0x3e>
 cc8:	e1 f0       	breq	.+56     	; 0xd02 <__fixunssfsi+0x4c>
 cca:	66 0f       	add	r22, r22
 ccc:	77 1f       	adc	r23, r23
 cce:	88 1f       	adc	r24, r24
 cd0:	99 1f       	adc	r25, r25
 cd2:	1a f0       	brmi	.+6      	; 0xcda <__fixunssfsi+0x24>
 cd4:	ba 95       	dec	r27
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__fixunssfsi+0x14>
 cd8:	14 c0       	rjmp	.+40     	; 0xd02 <__fixunssfsi+0x4c>
 cda:	b1 30       	cpi	r27, 0x01	; 1
 cdc:	91 f0       	breq	.+36     	; 0xd02 <__fixunssfsi+0x4c>
 cde:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fp_zero>
 ce2:	b1 e0       	ldi	r27, 0x01	; 1
 ce4:	08 95       	ret
 ce6:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_zero>
 cea:	67 2f       	mov	r22, r23
 cec:	78 2f       	mov	r23, r24
 cee:	88 27       	eor	r24, r24
 cf0:	b8 5f       	subi	r27, 0xF8	; 248
 cf2:	39 f0       	breq	.+14     	; 0xd02 <__fixunssfsi+0x4c>
 cf4:	b9 3f       	cpi	r27, 0xF9	; 249
 cf6:	cc f3       	brlt	.-14     	; 0xcea <__fixunssfsi+0x34>
 cf8:	86 95       	lsr	r24
 cfa:	77 95       	ror	r23
 cfc:	67 95       	ror	r22
 cfe:	b3 95       	inc	r27
 d00:	d9 f7       	brne	.-10     	; 0xcf8 <__fixunssfsi+0x42>
 d02:	3e f4       	brtc	.+14     	; 0xd12 <__fixunssfsi+0x5c>
 d04:	90 95       	com	r25
 d06:	80 95       	com	r24
 d08:	70 95       	com	r23
 d0a:	61 95       	neg	r22
 d0c:	7f 4f       	sbci	r23, 0xFF	; 255
 d0e:	8f 4f       	sbci	r24, 0xFF	; 255
 d10:	9f 4f       	sbci	r25, 0xFF	; 255
 d12:	08 95       	ret

00000d14 <__floatunsisf>:
 d14:	e8 94       	clt
 d16:	09 c0       	rjmp	.+18     	; 0xd2a <__floatsisf+0x12>

00000d18 <__floatsisf>:
 d18:	97 fb       	bst	r25, 7
 d1a:	3e f4       	brtc	.+14     	; 0xd2a <__floatsisf+0x12>
 d1c:	90 95       	com	r25
 d1e:	80 95       	com	r24
 d20:	70 95       	com	r23
 d22:	61 95       	neg	r22
 d24:	7f 4f       	sbci	r23, 0xFF	; 255
 d26:	8f 4f       	sbci	r24, 0xFF	; 255
 d28:	9f 4f       	sbci	r25, 0xFF	; 255
 d2a:	99 23       	and	r25, r25
 d2c:	a9 f0       	breq	.+42     	; 0xd58 <__floatsisf+0x40>
 d2e:	f9 2f       	mov	r31, r25
 d30:	96 e9       	ldi	r25, 0x96	; 150
 d32:	bb 27       	eor	r27, r27
 d34:	93 95       	inc	r25
 d36:	f6 95       	lsr	r31
 d38:	87 95       	ror	r24
 d3a:	77 95       	ror	r23
 d3c:	67 95       	ror	r22
 d3e:	b7 95       	ror	r27
 d40:	f1 11       	cpse	r31, r1
 d42:	f8 cf       	rjmp	.-16     	; 0xd34 <__floatsisf+0x1c>
 d44:	fa f4       	brpl	.+62     	; 0xd84 <__floatsisf+0x6c>
 d46:	bb 0f       	add	r27, r27
 d48:	11 f4       	brne	.+4      	; 0xd4e <__floatsisf+0x36>
 d4a:	60 ff       	sbrs	r22, 0
 d4c:	1b c0       	rjmp	.+54     	; 0xd84 <__floatsisf+0x6c>
 d4e:	6f 5f       	subi	r22, 0xFF	; 255
 d50:	7f 4f       	sbci	r23, 0xFF	; 255
 d52:	8f 4f       	sbci	r24, 0xFF	; 255
 d54:	9f 4f       	sbci	r25, 0xFF	; 255
 d56:	16 c0       	rjmp	.+44     	; 0xd84 <__floatsisf+0x6c>
 d58:	88 23       	and	r24, r24
 d5a:	11 f0       	breq	.+4      	; 0xd60 <__floatsisf+0x48>
 d5c:	96 e9       	ldi	r25, 0x96	; 150
 d5e:	11 c0       	rjmp	.+34     	; 0xd82 <__floatsisf+0x6a>
 d60:	77 23       	and	r23, r23
 d62:	21 f0       	breq	.+8      	; 0xd6c <__floatsisf+0x54>
 d64:	9e e8       	ldi	r25, 0x8E	; 142
 d66:	87 2f       	mov	r24, r23
 d68:	76 2f       	mov	r23, r22
 d6a:	05 c0       	rjmp	.+10     	; 0xd76 <__floatsisf+0x5e>
 d6c:	66 23       	and	r22, r22
 d6e:	71 f0       	breq	.+28     	; 0xd8c <__floatsisf+0x74>
 d70:	96 e8       	ldi	r25, 0x86	; 134
 d72:	86 2f       	mov	r24, r22
 d74:	70 e0       	ldi	r23, 0x00	; 0
 d76:	60 e0       	ldi	r22, 0x00	; 0
 d78:	2a f0       	brmi	.+10     	; 0xd84 <__floatsisf+0x6c>
 d7a:	9a 95       	dec	r25
 d7c:	66 0f       	add	r22, r22
 d7e:	77 1f       	adc	r23, r23
 d80:	88 1f       	adc	r24, r24
 d82:	da f7       	brpl	.-10     	; 0xd7a <__floatsisf+0x62>
 d84:	88 0f       	add	r24, r24
 d86:	96 95       	lsr	r25
 d88:	87 95       	ror	r24
 d8a:	97 f9       	bld	r25, 7
 d8c:	08 95       	ret

00000d8e <__fp_split3>:
 d8e:	57 fd       	sbrc	r21, 7
 d90:	90 58       	subi	r25, 0x80	; 128
 d92:	44 0f       	add	r20, r20
 d94:	55 1f       	adc	r21, r21
 d96:	59 f0       	breq	.+22     	; 0xdae <__fp_splitA+0x10>
 d98:	5f 3f       	cpi	r21, 0xFF	; 255
 d9a:	71 f0       	breq	.+28     	; 0xdb8 <__fp_splitA+0x1a>
 d9c:	47 95       	ror	r20

00000d9e <__fp_splitA>:
 d9e:	88 0f       	add	r24, r24
 da0:	97 fb       	bst	r25, 7
 da2:	99 1f       	adc	r25, r25
 da4:	61 f0       	breq	.+24     	; 0xdbe <__fp_splitA+0x20>
 da6:	9f 3f       	cpi	r25, 0xFF	; 255
 da8:	79 f0       	breq	.+30     	; 0xdc8 <__fp_splitA+0x2a>
 daa:	87 95       	ror	r24
 dac:	08 95       	ret
 dae:	12 16       	cp	r1, r18
 db0:	13 06       	cpc	r1, r19
 db2:	14 06       	cpc	r1, r20
 db4:	55 1f       	adc	r21, r21
 db6:	f2 cf       	rjmp	.-28     	; 0xd9c <__fp_split3+0xe>
 db8:	46 95       	lsr	r20
 dba:	f1 df       	rcall	.-30     	; 0xd9e <__fp_splitA>
 dbc:	08 c0       	rjmp	.+16     	; 0xdce <__fp_splitA+0x30>
 dbe:	16 16       	cp	r1, r22
 dc0:	17 06       	cpc	r1, r23
 dc2:	18 06       	cpc	r1, r24
 dc4:	99 1f       	adc	r25, r25
 dc6:	f1 cf       	rjmp	.-30     	; 0xdaa <__fp_splitA+0xc>
 dc8:	86 95       	lsr	r24
 dca:	71 05       	cpc	r23, r1
 dcc:	61 05       	cpc	r22, r1
 dce:	08 94       	sec
 dd0:	08 95       	ret

00000dd2 <__fp_zero>:
 dd2:	e8 94       	clt

00000dd4 <__fp_szero>:
 dd4:	bb 27       	eor	r27, r27
 dd6:	66 27       	eor	r22, r22
 dd8:	77 27       	eor	r23, r23
 dda:	cb 01       	movw	r24, r22
 ddc:	97 f9       	bld	r25, 7
 dde:	08 95       	ret

00000de0 <__mulsf3>:
 de0:	0e 94 03 07 	call	0xe06	; 0xe06 <__mulsf3x>
 de4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__fp_round>
 de8:	0e 94 66 07 	call	0xecc	; 0xecc <__fp_pscA>
 dec:	38 f0       	brcs	.+14     	; 0xdfc <__mulsf3+0x1c>
 dee:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_pscB>
 df2:	20 f0       	brcs	.+8      	; 0xdfc <__mulsf3+0x1c>
 df4:	95 23       	and	r25, r21
 df6:	11 f0       	breq	.+4      	; 0xdfc <__mulsf3+0x1c>
 df8:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
 dfc:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_nan>
 e00:	11 24       	eor	r1, r1
 e02:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_szero>

00000e06 <__mulsf3x>:
 e06:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__fp_split3>
 e0a:	70 f3       	brcs	.-36     	; 0xde8 <__mulsf3+0x8>

00000e0c <__mulsf3_pse>:
 e0c:	95 9f       	mul	r25, r21
 e0e:	c1 f3       	breq	.-16     	; 0xe00 <__mulsf3+0x20>
 e10:	95 0f       	add	r25, r21
 e12:	50 e0       	ldi	r21, 0x00	; 0
 e14:	55 1f       	adc	r21, r21
 e16:	62 9f       	mul	r22, r18
 e18:	f0 01       	movw	r30, r0
 e1a:	72 9f       	mul	r23, r18
 e1c:	bb 27       	eor	r27, r27
 e1e:	f0 0d       	add	r31, r0
 e20:	b1 1d       	adc	r27, r1
 e22:	63 9f       	mul	r22, r19
 e24:	aa 27       	eor	r26, r26
 e26:	f0 0d       	add	r31, r0
 e28:	b1 1d       	adc	r27, r1
 e2a:	aa 1f       	adc	r26, r26
 e2c:	64 9f       	mul	r22, r20
 e2e:	66 27       	eor	r22, r22
 e30:	b0 0d       	add	r27, r0
 e32:	a1 1d       	adc	r26, r1
 e34:	66 1f       	adc	r22, r22
 e36:	82 9f       	mul	r24, r18
 e38:	22 27       	eor	r18, r18
 e3a:	b0 0d       	add	r27, r0
 e3c:	a1 1d       	adc	r26, r1
 e3e:	62 1f       	adc	r22, r18
 e40:	73 9f       	mul	r23, r19
 e42:	b0 0d       	add	r27, r0
 e44:	a1 1d       	adc	r26, r1
 e46:	62 1f       	adc	r22, r18
 e48:	83 9f       	mul	r24, r19
 e4a:	a0 0d       	add	r26, r0
 e4c:	61 1d       	adc	r22, r1
 e4e:	22 1f       	adc	r18, r18
 e50:	74 9f       	mul	r23, r20
 e52:	33 27       	eor	r19, r19
 e54:	a0 0d       	add	r26, r0
 e56:	61 1d       	adc	r22, r1
 e58:	23 1f       	adc	r18, r19
 e5a:	84 9f       	mul	r24, r20
 e5c:	60 0d       	add	r22, r0
 e5e:	21 1d       	adc	r18, r1
 e60:	82 2f       	mov	r24, r18
 e62:	76 2f       	mov	r23, r22
 e64:	6a 2f       	mov	r22, r26
 e66:	11 24       	eor	r1, r1
 e68:	9f 57       	subi	r25, 0x7F	; 127
 e6a:	50 40       	sbci	r21, 0x00	; 0
 e6c:	9a f0       	brmi	.+38     	; 0xe94 <__mulsf3_pse+0x88>
 e6e:	f1 f0       	breq	.+60     	; 0xeac <__mulsf3_pse+0xa0>
 e70:	88 23       	and	r24, r24
 e72:	4a f0       	brmi	.+18     	; 0xe86 <__mulsf3_pse+0x7a>
 e74:	ee 0f       	add	r30, r30
 e76:	ff 1f       	adc	r31, r31
 e78:	bb 1f       	adc	r27, r27
 e7a:	66 1f       	adc	r22, r22
 e7c:	77 1f       	adc	r23, r23
 e7e:	88 1f       	adc	r24, r24
 e80:	91 50       	subi	r25, 0x01	; 1
 e82:	50 40       	sbci	r21, 0x00	; 0
 e84:	a9 f7       	brne	.-22     	; 0xe70 <__mulsf3_pse+0x64>
 e86:	9e 3f       	cpi	r25, 0xFE	; 254
 e88:	51 05       	cpc	r21, r1
 e8a:	80 f0       	brcs	.+32     	; 0xeac <__mulsf3_pse+0xa0>
 e8c:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
 e90:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__fp_szero>
 e94:	5f 3f       	cpi	r21, 0xFF	; 255
 e96:	e4 f3       	brlt	.-8      	; 0xe90 <__mulsf3_pse+0x84>
 e98:	98 3e       	cpi	r25, 0xE8	; 232
 e9a:	d4 f3       	brlt	.-12     	; 0xe90 <__mulsf3_pse+0x84>
 e9c:	86 95       	lsr	r24
 e9e:	77 95       	ror	r23
 ea0:	67 95       	ror	r22
 ea2:	b7 95       	ror	r27
 ea4:	f7 95       	ror	r31
 ea6:	e7 95       	ror	r30
 ea8:	9f 5f       	subi	r25, 0xFF	; 255
 eaa:	c1 f7       	brne	.-16     	; 0xe9c <__mulsf3_pse+0x90>
 eac:	fe 2b       	or	r31, r30
 eae:	88 0f       	add	r24, r24
 eb0:	91 1d       	adc	r25, r1
 eb2:	96 95       	lsr	r25
 eb4:	87 95       	ror	r24
 eb6:	97 f9       	bld	r25, 7
 eb8:	08 95       	ret

00000eba <__fp_inf>:
 eba:	97 f9       	bld	r25, 7
 ebc:	9f 67       	ori	r25, 0x7F	; 127
 ebe:	80 e8       	ldi	r24, 0x80	; 128
 ec0:	70 e0       	ldi	r23, 0x00	; 0
 ec2:	60 e0       	ldi	r22, 0x00	; 0
 ec4:	08 95       	ret

00000ec6 <__fp_nan>:
 ec6:	9f ef       	ldi	r25, 0xFF	; 255
 ec8:	80 ec       	ldi	r24, 0xC0	; 192
 eca:	08 95       	ret

00000ecc <__fp_pscA>:
 ecc:	00 24       	eor	r0, r0
 ece:	0a 94       	dec	r0
 ed0:	16 16       	cp	r1, r22
 ed2:	17 06       	cpc	r1, r23
 ed4:	18 06       	cpc	r1, r24
 ed6:	09 06       	cpc	r0, r25
 ed8:	08 95       	ret

00000eda <__fp_pscB>:
 eda:	00 24       	eor	r0, r0
 edc:	0a 94       	dec	r0
 ede:	12 16       	cp	r1, r18
 ee0:	13 06       	cpc	r1, r19
 ee2:	14 06       	cpc	r1, r20
 ee4:	05 06       	cpc	r0, r21
 ee6:	08 95       	ret

00000ee8 <__fp_round>:
 ee8:	09 2e       	mov	r0, r25
 eea:	03 94       	inc	r0
 eec:	00 0c       	add	r0, r0
 eee:	11 f4       	brne	.+4      	; 0xef4 <__fp_round+0xc>
 ef0:	88 23       	and	r24, r24
 ef2:	52 f0       	brmi	.+20     	; 0xf08 <__fp_round+0x20>
 ef4:	bb 0f       	add	r27, r27
 ef6:	40 f4       	brcc	.+16     	; 0xf08 <__fp_round+0x20>
 ef8:	bf 2b       	or	r27, r31
 efa:	11 f4       	brne	.+4      	; 0xf00 <__fp_round+0x18>
 efc:	60 ff       	sbrs	r22, 0
 efe:	04 c0       	rjmp	.+8      	; 0xf08 <__fp_round+0x20>
 f00:	6f 5f       	subi	r22, 0xFF	; 255
 f02:	7f 4f       	sbci	r23, 0xFF	; 255
 f04:	8f 4f       	sbci	r24, 0xFF	; 255
 f06:	9f 4f       	sbci	r25, 0xFF	; 255
 f08:	08 95       	ret

00000f0a <_exit>:
 f0a:	f8 94       	cli

00000f0c <__stop_program>:
 f0c:	ff cf       	rjmp	.-2      	; 0xf0c <__stop_program>
