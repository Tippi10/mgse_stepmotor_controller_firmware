
FGSE_LV_Controller_nanoCAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000da4  00000e38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  0080010a  0080010a  00000e42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185e  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f05  00000000  00000000  00002892  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001362  00000000  00000000  00003797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00004afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b7  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087e  00000000  00000000  00005783  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_14>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_17>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ea       	ldi	r30, 0xA4	; 164
  90:	fd e0       	ldi	r31, 0x0D	; 13
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 36       	cpi	r26, 0x6D	; 109
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  b2:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <WatchDog_init>:
  ba:	f8 94       	cli
  bc:	a8 95       	wdr
  be:	84 b7       	in	r24, 0x34	; 52
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	84 bf       	out	0x34, r24	; 52
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 61       	ori	r24, 0x18	; 24
  cc:	80 83       	st	Z, r24
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <init>:
  e2:	0e 94 5d 00 	call	0xba	; 0xba <WatchDog_init>
  e6:	78 94       	sei
  e8:	0e 94 bf 02 	call	0x57e	; 0x57e <GPIO_select>
  ec:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <RTC_100us>
  f0:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <RTC_100us+0x1>
  f4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <RTC_100us+0x2>
  f8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <RTC_100us+0x3>
  fc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <RTC_ms>
 100:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <RTC_ms+0x1>
 104:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <RTC_ms+0x2>
 108:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <RTC_ms+0x3>
 10c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <RTC_s>
 110:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <RTC_s+0x1>
 114:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <RTC_s+0x2>
 118:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <RTC_s+0x3>
 11c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <_RTC_Tim0OVF_Count>
 120:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <_RTC_Tim0OVF_Count+0x1>
 124:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <_RTC_Tim0OVF_Count+0x2>
 128:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <_RTC_Tim0OVF_Count+0x3>
 12c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <_RTC_Tim0OVF_Count1>
 130:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <_RTC_Tim0OVF_Count2>
 134:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <_RTC_100us>
 138:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <_RTC_100us+0x1>
 13c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <_RTC_100us+0x2>
 140:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <_RTC_100us+0x3>
 144:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <_RTC_ms>
 148:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <_RTC_ms+0x1>
 14c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <_RTC_ms+0x2>
 150:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_RTC_ms+0x3>
 154:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <_RTC_s>
 158:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <_RTC_s+0x1>
 15c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <_RTC_s+0x2>
 160:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <_RTC_s+0x3>
 164:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 168:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 16c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 170:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
 174:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_Control_Flag_1>
 178:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_Control_Flag_1+0x1>
 17c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_Control_Flag_1+0x2>
 180:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_Control_Flag_1+0x3>
 184:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <_Control_Flag_2>
 188:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <_Control_Flag_2+0x1>
 18c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_Control_Flag_2+0x2>
 190:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <_Control_Flag_2+0x3>
 194:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_Control_Flag_3>
 198:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_Control_Flag_3+0x1>
 19c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_Control_Flag_3+0x2>
 1a0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_Control_Flag_3+0x3>
 1a4:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_Control_Flag_4>
 1a8:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <_Control_Flag_4+0x1>
 1ac:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_Control_Flag_4+0x2>
 1b0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <_Control_Flag_4+0x3>
 1b4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 1b8:	ee e6       	ldi	r30, 0x6E	; 110
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	80 83       	st	Z, r24
 1c2:	14 bc       	out	0x24, r1	; 36
 1c4:	15 bc       	out	0x25, r1	; 37
 1c6:	85 b5       	in	r24, 0x25	; 37
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	85 bd       	out	0x25, r24	; 37
 1cc:	85 b5       	in	r24, 0x25	; 37
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 bd       	out	0x25, r24	; 37
 1d2:	87 ee       	ldi	r24, 0xE7	; 231
 1d4:	86 bd       	out	0x26, r24	; 38
 1d6:	80 81       	ld	r24, Z
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24
 1dc:	ef e6       	ldi	r30, 0x6F	; 111
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8e 7f       	andi	r24, 0xFE	; 254
 1e4:	80 83       	st	Z, r24
 1e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 1ea:	e1 e8       	ldi	r30, 0x81	; 129
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	10 82       	st	Z, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	80 83       	st	Z, r24
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	80 83       	st	Z, r24
 200:	80 81       	ld	r24, Z
 202:	82 60       	ori	r24, 0x02	; 2
 204:	80 83       	st	Z, r24
 206:	80 81       	ld	r24, Z
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 83       	st	Z, r24
 20c:	80 81       	ld	r24, Z
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	80 83       	st	Z, r24
 212:	e8 ec       	ldi	r30, 0xC8	; 200
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <main>:
 21e:	0e 94 71 00 	call	0xe2	; 0xe2 <init>
 222:	0e 94 b5 02 	call	0x56a	; 0x56a <setup>
 226:	a8 95       	wdr
 228:	0e 94 4d 05 	call	0xa9a	; 0xa9a <loop>
 22c:	fc cf       	rjmp	.-8      	; 0x226 <main+0x8>

0000022e <__vector_17>:
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	87 ee       	ldi	r24, 0xE7	; 231
 242:	86 bd       	out	0x26, r24	; 38
 244:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_RTC_Tim0OVF_Count>
 248:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_RTC_Tim0OVF_Count+0x1>
 24c:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_RTC_Tim0OVF_Count+0x2>
 250:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_RTC_Tim0OVF_Count+0x3>
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	a1 1d       	adc	r26, r1
 258:	b1 1d       	adc	r27, r1
 25a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <_RTC_Tim0OVF_Count>
 25e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <_RTC_Tim0OVF_Count+0x1>
 262:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <_RTC_Tim0OVF_Count+0x2>
 266:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <_RTC_Tim0OVF_Count+0x3>
 26a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_RTC_Tim0OVF_Count1>
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_RTC_Tim0OVF_Count1>
 274:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_RTC_Tim0OVF_Count2>
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <_RTC_Tim0OVF_Count2>
 27e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_RTC_100us>
 282:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_RTC_100us+0x1>
 286:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <_RTC_100us+0x2>
 28a:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <_RTC_100us+0x3>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	a1 1d       	adc	r26, r1
 292:	b1 1d       	adc	r27, r1
 294:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_RTC_100us>
 298:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_RTC_100us+0x1>
 29c:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <_RTC_100us+0x2>
 2a0:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <_RTC_100us+0x3>
 2a4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_RTC_Tim0OVF_Count1>
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	a8 f0       	brcs	.+42     	; 0x2d6 <__vector_17+0xa8>
 2ac:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_RTC_ms>
 2b0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_RTC_ms+0x1>
 2b4:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <_RTC_ms+0x2>
 2b8:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <_RTC_ms+0x3>
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	a1 1d       	adc	r26, r1
 2c0:	b1 1d       	adc	r27, r1
 2c2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <_RTC_ms>
 2c6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <_RTC_ms+0x1>
 2ca:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <_RTC_ms+0x2>
 2ce:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <_RTC_ms+0x3>
 2d2:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <_RTC_Tim0OVF_Count1>
 2d6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_RTC_Tim0OVF_Count2>
 2da:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_Control_Flag_0>
 2de:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_Control_Flag_0+0x1>
 2e2:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_Control_Flag_0+0x2>
 2e6:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_Control_Flag_0+0x3>
 2ea:	89 2b       	or	r24, r25
 2ec:	8a 2b       	or	r24, r26
 2ee:	8b 2b       	or	r24, r27
 2f0:	41 f4       	brne	.+16     	; 0x302 <__vector_17+0xd4>
 2f2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 2f6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 2fa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 2fe:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
 302:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_Control_Flag_1>
 306:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_Control_Flag_1+0x1>
 30a:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <_Control_Flag_1+0x2>
 30e:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <_Control_Flag_1+0x3>
 312:	89 2b       	or	r24, r25
 314:	8a 2b       	or	r24, r26
 316:	8b 2b       	or	r24, r27
 318:	41 f4       	brne	.+16     	; 0x32a <__vector_17+0xfc>
 31a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_Control_Flag_1>
 31e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_Control_Flag_1+0x1>
 322:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_Control_Flag_1+0x2>
 326:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_Control_Flag_1+0x3>
 32a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <_Control_Flag_2>
 32e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <_Control_Flag_2+0x1>
 332:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <_Control_Flag_2+0x2>
 336:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <_Control_Flag_2+0x3>
 33a:	89 2b       	or	r24, r25
 33c:	8a 2b       	or	r24, r26
 33e:	8b 2b       	or	r24, r27
 340:	41 f4       	brne	.+16     	; 0x352 <__vector_17+0x124>
 342:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <_Control_Flag_2>
 346:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <_Control_Flag_2+0x1>
 34a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <_Control_Flag_2+0x2>
 34e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <_Control_Flag_2+0x3>
 352:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_Control_Flag_3>
 356:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <_Control_Flag_3+0x1>
 35a:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <_Control_Flag_3+0x2>
 35e:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <_Control_Flag_3+0x3>
 362:	89 2b       	or	r24, r25
 364:	8a 2b       	or	r24, r26
 366:	8b 2b       	or	r24, r27
 368:	41 f4       	brne	.+16     	; 0x37a <__vector_17+0x14c>
 36a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_Control_Flag_3>
 36e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_Control_Flag_3+0x1>
 372:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_Control_Flag_3+0x2>
 376:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <_Control_Flag_3+0x3>
 37a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_Control_Flag_4>
 37e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_Control_Flag_4+0x1>
 382:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_Control_Flag_4+0x2>
 386:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_Control_Flag_4+0x3>
 38a:	89 2b       	or	r24, r25
 38c:	8a 2b       	or	r24, r26
 38e:	8b 2b       	or	r24, r27
 390:	41 f4       	brne	.+16     	; 0x3a2 <__vector_17+0x174>
 392:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <_Control_Flag_4>
 396:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <_Control_Flag_4+0x1>
 39a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_Control_Flag_4+0x2>
 39e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <_Control_Flag_4+0x3>
 3a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 3ac:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_RTC_100us>
 3b0:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_RTC_100us+0x1>
 3b4:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <_RTC_100us+0x2>
 3b8:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <_RTC_100us+0x3>
 3bc:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <RTC_100us>
 3c0:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <RTC_100us+0x1>
 3c4:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <RTC_100us+0x2>
 3c8:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <RTC_100us+0x3>
 3cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 3d6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_RTC_ms>
 3da:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_RTC_ms+0x1>
 3de:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <_RTC_ms+0x2>
 3e2:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <_RTC_ms+0x3>
 3e6:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <RTC_ms>
 3ea:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <RTC_ms+0x1>
 3ee:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <RTC_ms+0x2>
 3f2:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <RTC_ms+0x3>
 3f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3fa:	84 60       	ori	r24, 0x04	; 4
 3fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 400:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_RTC_s>
 404:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_RTC_s+0x1>
 408:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <_RTC_s+0x2>
 40c:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <_RTC_s+0x3>
 410:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <RTC_s>
 414:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <RTC_s+0x1>
 418:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <RTC_s+0x2>
 41c:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <RTC_s+0x3>
 420:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 424:	88 60       	ori	r24, 0x08	; 8
 426:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 42a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_Control_Flag_0>
 42e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_Control_Flag_0+0x1>
 432:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_Control_Flag_0+0x2>
 436:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_Control_Flag_0+0x3>
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	a1 1d       	adc	r26, r1
 43e:	b1 1d       	adc	r27, r1
 440:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_Control_Flag_0>
 444:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_Control_Flag_0+0x1>
 448:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <_Control_Flag_0+0x2>
 44c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <_Control_Flag_0+0x3>
 450:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 454:	80 61       	ori	r24, 0x10	; 16
 456:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 45a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_Control_Flag_1>
 45e:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <_Control_Flag_1+0x1>
 462:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <_Control_Flag_1+0x2>
 466:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <_Control_Flag_1+0x3>
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	a1 1d       	adc	r26, r1
 46e:	b1 1d       	adc	r27, r1
 470:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_Control_Flag_1>
 474:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <_Control_Flag_1+0x1>
 478:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <_Control_Flag_1+0x2>
 47c:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <_Control_Flag_1+0x3>
 480:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 484:	80 62       	ori	r24, 0x20	; 32
 486:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 48a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <_Control_Flag_2>
 48e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <_Control_Flag_2+0x1>
 492:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <_Control_Flag_2+0x2>
 496:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <_Control_Flag_2+0x3>
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	a1 1d       	adc	r26, r1
 49e:	b1 1d       	adc	r27, r1
 4a0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <_Control_Flag_2>
 4a4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <_Control_Flag_2+0x1>
 4a8:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <_Control_Flag_2+0x2>
 4ac:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <_Control_Flag_2+0x3>
 4b0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 4b4:	80 64       	ori	r24, 0x40	; 64
 4b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 4ba:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_Control_Flag_3>
 4be:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <_Control_Flag_3+0x1>
 4c2:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <_Control_Flag_3+0x2>
 4c6:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <_Control_Flag_3+0x3>
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	a1 1d       	adc	r26, r1
 4ce:	b1 1d       	adc	r27, r1
 4d0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <_Control_Flag_3>
 4d4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <_Control_Flag_3+0x1>
 4d8:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <_Control_Flag_3+0x2>
 4dc:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <_Control_Flag_3+0x3>
 4e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 4e4:	80 68       	ori	r24, 0x80	; 128
 4e6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 4ea:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_Control_Flag_4>
 4ee:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_Control_Flag_4+0x1>
 4f2:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_Control_Flag_4+0x2>
 4f6:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_Control_Flag_4+0x3>
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	a1 1d       	adc	r26, r1
 4fe:	b1 1d       	adc	r27, r1
 500:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_Control_Flag_4>
 504:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_Control_Flag_4+0x1>
 508:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_Control_Flag_4+0x2>
 50c:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_Control_Flag_4+0x3>
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <__vector_28>:
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	2f 93       	push	r18
 52e:	3f 93       	push	r19
 530:	4f 93       	push	r20
 532:	5f 93       	push	r21
 534:	6f 93       	push	r22
 536:	7f 93       	push	r23
 538:	8f 93       	push	r24
 53a:	9f 93       	push	r25
 53c:	af 93       	push	r26
 53e:	bf 93       	push	r27
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
 544:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Error_Handler>
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <setup>:
			break;
		case LV_3_ADDR:
			LV_POS_RST_flag[2] = 1;
			break;
		case LV_4_ADDR:
			LV_POS_RST_flag[3] = 1;
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	cb 01       	movw	r24, r22
 570:	0e 94 77 05 	call	0xaee	; 0xaee <CAN_initialize>
 574:	40 9a       	sbi	0x08, 0	; 8
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LV_POS_RST_flag>
 57c:	08 95       	ret

0000057e <GPIO_select>:
 57e:	52 9a       	sbi	0x0a, 2	; 10
 580:	54 9a       	sbi	0x0a, 4	; 10
 582:	56 9a       	sbi	0x0a, 6	; 10
 584:	55 9a       	sbi	0x0a, 5	; 10
 586:	51 9a       	sbi	0x0a, 1	; 10
 588:	39 9a       	sbi	0x07, 1	; 7
 58a:	52 9a       	sbi	0x0a, 2	; 10
 58c:	23 9a       	sbi	0x04, 3	; 4
 58e:	3f 9a       	sbi	0x07, 7	; 7
 590:	24 9a       	sbi	0x04, 4	; 4
 592:	25 9a       	sbi	0x04, 5	; 4
 594:	50 9a       	sbi	0x0a, 0	; 10
 596:	26 9a       	sbi	0x04, 6	; 4
 598:	38 9a       	sbi	0x07, 0	; 7
 59a:	22 9a       	sbi	0x04, 2	; 4
 59c:	3c 9a       	sbi	0x07, 4	; 7
 59e:	3d 98       	cbi	0x07, 5	; 7
 5a0:	57 98       	cbi	0x0a, 7	; 10
 5a2:	08 95       	ret

000005a4 <Error_Handler>:
 5a4:	08 95       	ret

000005a6 <LVSetLength>:
	}
}

void LVSetLength(uint8_t Addr, uint8_t angle) //set {LV} to {degree} //change LVSetDegree to sth else to make it more clear
{
	switch (Addr)
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	c9 f0       	breq	.+50     	; 0x5dc <LVSetLength+0x36>
 5aa:	18 f4       	brcc	.+6      	; 0x5b2 <LVSetLength+0xc>
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	31 f0       	breq	.+12     	; 0x5bc <LVSetLength+0x16>
 5b0:	08 95       	ret
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	19 f1       	breq	.+70     	; 0x5fc <LVSetLength+0x56>
 5b6:	84 30       	cpi	r24, 0x04	; 4
 5b8:	89 f1       	breq	.+98     	; 0x61c <LVSetLength+0x76>
 5ba:	08 95       	ret
	{
		case LV_1_ADDR:
			LV_stepToGo[0] = (angle - LV_currentlength[0]) * 50; //  200 steps per 4 cm // 50 steps per 1 cm
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LV_currentlength>
 5c2:	68 1b       	sub	r22, r24
 5c4:	71 09       	sbc	r23, r1
 5c6:	22 e3       	ldi	r18, 0x32	; 50
 5c8:	26 9f       	mul	r18, r22
 5ca:	c0 01       	movw	r24, r0
 5cc:	27 9f       	mul	r18, r23
 5ce:	90 0d       	add	r25, r0
 5d0:	11 24       	eor	r1, r1
 5d2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <LV_stepToGo+0x1>
 5d6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <LV_stepToGo>
			break;
 5da:	08 95       	ret
		case LV_2_ADDR:
			LV_stepToGo[0] = (angle - LV_currentlength[0]) * 50; //  200 steps per 4 cm // 50 steps per 1 cm
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LV_currentlength>
 5e2:	68 1b       	sub	r22, r24
 5e4:	71 09       	sbc	r23, r1
 5e6:	22 e3       	ldi	r18, 0x32	; 50
 5e8:	26 9f       	mul	r18, r22
 5ea:	c0 01       	movw	r24, r0
 5ec:	27 9f       	mul	r18, r23
 5ee:	90 0d       	add	r25, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <LV_stepToGo+0x1>
 5f6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <LV_stepToGo>
			break;
 5fa:	08 95       	ret
		case LV_3_ADDR:
			LV_stepToGo[0] = (angle - LV_currentlength[0]) * 50; //  200 steps per 4 cm // 50 steps per 1 cm
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LV_currentlength>
 602:	68 1b       	sub	r22, r24
 604:	71 09       	sbc	r23, r1
 606:	22 e3       	ldi	r18, 0x32	; 50
 608:	26 9f       	mul	r18, r22
 60a:	c0 01       	movw	r24, r0
 60c:	27 9f       	mul	r18, r23
 60e:	90 0d       	add	r25, r0
 610:	11 24       	eor	r1, r1
 612:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <LV_stepToGo+0x1>
 616:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <LV_stepToGo>
			break;
 61a:	08 95       	ret
		case LV_4_ADDR:
			LV_stepToGo[0] = (angle - LV_currentlength[0]) * 50; //  200 steps per 4 cm // 50 steps per 1 cm
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LV_currentlength>
 622:	68 1b       	sub	r22, r24
 624:	71 09       	sbc	r23, r1
 626:	22 e3       	ldi	r18, 0x32	; 50
 628:	26 9f       	mul	r18, r22
 62a:	c0 01       	movw	r24, r0
 62c:	27 9f       	mul	r18, r23
 62e:	90 0d       	add	r25, r0
 630:	11 24       	eor	r1, r1
 632:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <LV_stepToGo+0x1>
 636:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <LV_stepToGo>
 63a:	08 95       	ret

0000063c <CANhandle>:
/////////////////////////////////////////////////
///////////Things i need to modify///////////////
/////////////////////////////////////////////////

void CANhandle(void)
{
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
	if( CAN_available() )
 644:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 648:	85 ff       	sbrs	r24, 5
 64a:	91 c0       	rjmp	.+290    	; 0x76e <CANhandle+0x132>
	{
		CANRead();
 64c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <CANRead>
		if (CAN_MSG[0] == 0) //length set to what we enter
 650:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <CAN_MSG>
 654:	81 11       	cpse	r24, r1
 656:	34 c0       	rjmp	.+104    	; 0x6c0 <CANhandle+0x84>
		{
			if (CAN_MSG[1] == 0 && LV_POS_RST_flag[0] == 0 && done == true)
 658:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <CAN_MSG+0x1>
 65c:	81 11       	cpse	r24, r1
 65e:	11 c0       	rjmp	.+34     	; 0x682 <CANhandle+0x46>
 660:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LV_POS_RST_flag>
 664:	81 11       	cpse	r24, r1
 666:	83 c0       	rjmp	.+262    	; 0x76e <CANhandle+0x132>
 668:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <done>
 66c:	88 23       	and	r24, r24
 66e:	09 f4       	brne	.+2      	; 0x672 <CANhandle+0x36>
 670:	7e c0       	rjmp	.+252    	; 0x76e <CANhandle+0x132>
			{
				LV_currentlength[0] = CAN_MSG[1];
 672:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <LV_currentlength>
void LVPosReset(uint8_t Addr)
{
	switch (Addr)
	{
		case LV_1_ADDR:
			LV_POS_RST_flag[0] = 1;
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LV_POS_RST_flag>
		{
			if (CAN_MSG[1] == 0 && LV_POS_RST_flag[0] == 0 && done == true)
			{
				LV_currentlength[0] = CAN_MSG[1];
				LVPosReset(0x01);
				done = false;
 67c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <done>
 680:	76 c0       	rjmp	.+236    	; 0x76e <CANhandle+0x132>
			}
			else if (CAN_MSG[1] != 0 && LV_POS_RST_flag[0] == 0 && done == true)
 682:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <LV_POS_RST_flag>
 686:	91 11       	cpse	r25, r1
 688:	72 c0       	rjmp	.+228    	; 0x76e <CANhandle+0x132>
 68a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <done>
 68e:	99 23       	and	r25, r25
 690:	09 f4       	brne	.+2      	; 0x694 <CANhandle+0x58>
 692:	6d c0       	rjmp	.+218    	; 0x76e <CANhandle+0x132>
			{
				CAN_MSG[1] = (CAN_MSG[1] % 16) + ((CAN_MSG[1] / 16) % 16) * 10;
 694:	98 2f       	mov	r25, r24
 696:	92 95       	swap	r25
 698:	9f 70       	andi	r25, 0x0F	; 15
 69a:	99 0f       	add	r25, r25
 69c:	69 2f       	mov	r22, r25
 69e:	66 0f       	add	r22, r22
 6a0:	66 0f       	add	r22, r22
 6a2:	69 0f       	add	r22, r25
 6a4:	8f 70       	andi	r24, 0x0F	; 15
 6a6:	68 0f       	add	r22, r24
 6a8:	cb e1       	ldi	r28, 0x1B	; 27
 6aa:	d1 e0       	ldi	r29, 0x01	; 1
 6ac:	69 83       	std	Y+1, r22	; 0x01
				LVSetLength(0x01,CAN_MSG[1]);
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LVSetLength>
				LV_currentlength[0] = CAN_MSG[1];
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <LV_currentlength>
				done = false;
 6ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <done>
 6be:	57 c0       	rjmp	.+174    	; 0x76e <CANhandle+0x132>
			}
		}
		else if (CAN_MSG[0] == 1) //decrease the length we enter
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	59 f5       	brne	.+86     	; 0x71a <CANhandle+0xde>
		{
			if (CAN_MSG[1] == 0)
 6c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <CAN_MSG+0x1>
			{
				
			}
			else if (CAN_MSG[1] != 0 && LV_POS_RST_flag[0] == 0 && done == true)
 6c8:	88 23       	and	r24, r24
 6ca:	09 f4       	brne	.+2      	; 0x6ce <CANhandle+0x92>
 6cc:	50 c0       	rjmp	.+160    	; 0x76e <CANhandle+0x132>
 6ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <LV_POS_RST_flag>
 6d2:	91 11       	cpse	r25, r1
 6d4:	4c c0       	rjmp	.+152    	; 0x76e <CANhandle+0x132>
 6d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <done>
 6da:	99 23       	and	r25, r25
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <CANhandle+0xa4>
 6de:	47 c0       	rjmp	.+142    	; 0x76e <CANhandle+0x132>
			{
				CAN_MSG[1] = (CAN_MSG[1] % 16) + ((CAN_MSG[1] / 16) % 16) * 10;
 6e0:	98 2f       	mov	r25, r24
 6e2:	92 95       	swap	r25
 6e4:	9f 70       	andi	r25, 0x0F	; 15
 6e6:	99 0f       	add	r25, r25
 6e8:	29 2f       	mov	r18, r25
 6ea:	22 0f       	add	r18, r18
 6ec:	22 0f       	add	r18, r18
 6ee:	92 0f       	add	r25, r18
 6f0:	8f 70       	andi	r24, 0x0F	; 15
 6f2:	89 0f       	add	r24, r25
 6f4:	0b e1       	ldi	r16, 0x1B	; 27
 6f6:	11 e0       	ldi	r17, 0x01	; 1
 6f8:	f8 01       	movw	r30, r16
 6fa:	81 83       	std	Z+1, r24	; 0x01
				LVSetLength(0x01, LV_currentlength[0] - CAN_MSG[1]);
 6fc:	cf e0       	ldi	r28, 0x0F	; 15
 6fe:	d1 e0       	ldi	r29, 0x01	; 1
 700:	68 81       	ld	r22, Y
 702:	68 1b       	sub	r22, r24
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LVSetLength>
				LV_currentlength[0] = LV_currentlength[0] - CAN_MSG[1];
 70a:	88 81       	ld	r24, Y
 70c:	f8 01       	movw	r30, r16
 70e:	91 81       	ldd	r25, Z+1	; 0x01
 710:	89 1b       	sub	r24, r25
 712:	88 83       	st	Y, r24
				done = false;
 714:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <done>
 718:	2a c0       	rjmp	.+84     	; 0x76e <CANhandle+0x132>
			}
		}
		else if (CAN_MSG[0] == 2) //increase the length we enter
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	41 f5       	brne	.+80     	; 0x76e <CANhandle+0x132>
		{
			if (CAN_MSG[1] == 0)
 71e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <CAN_MSG+0x1>
			{
				
			}
			else if (CAN_MSG[1] != 0 && LV_POS_RST_flag[0] == 0 && done == true)
 722:	88 23       	and	r24, r24
 724:	21 f1       	breq	.+72     	; 0x76e <CANhandle+0x132>
 726:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <LV_POS_RST_flag>
 72a:	91 11       	cpse	r25, r1
 72c:	20 c0       	rjmp	.+64     	; 0x76e <CANhandle+0x132>
 72e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <done>
 732:	99 23       	and	r25, r25
 734:	e1 f0       	breq	.+56     	; 0x76e <CANhandle+0x132>
			{
				CAN_MSG[1] = (CAN_MSG[1] % 16) + ((CAN_MSG[1] / 16) % 16) * 10;
 736:	98 2f       	mov	r25, r24
 738:	92 95       	swap	r25
 73a:	9f 70       	andi	r25, 0x0F	; 15
 73c:	99 0f       	add	r25, r25
 73e:	29 2f       	mov	r18, r25
 740:	22 0f       	add	r18, r18
 742:	22 0f       	add	r18, r18
 744:	92 0f       	add	r25, r18
 746:	8f 70       	andi	r24, 0x0F	; 15
 748:	89 0f       	add	r24, r25
 74a:	0b e1       	ldi	r16, 0x1B	; 27
 74c:	11 e0       	ldi	r17, 0x01	; 1
 74e:	f8 01       	movw	r30, r16
 750:	81 83       	std	Z+1, r24	; 0x01
				LVSetLength(0x01, LV_currentlength[0] + CAN_MSG[1]);
 752:	cf e0       	ldi	r28, 0x0F	; 15
 754:	d1 e0       	ldi	r29, 0x01	; 1
 756:	68 81       	ld	r22, Y
 758:	68 0f       	add	r22, r24
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LVSetLength>
				LV_currentlength[0] = LV_currentlength[0] + CAN_MSG[1];
 760:	98 81       	ld	r25, Y
 762:	f8 01       	movw	r30, r16
 764:	81 81       	ldd	r24, Z+1	; 0x01
 766:	89 0f       	add	r24, r25
 768:	88 83       	st	Y, r24
				done = false;
 76a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <done>
			}
		}
	} //CAN available
}
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	08 95       	ret

00000778 <readOPB>:
	}

}
uint8_t readOPB(uint8_t num)
{
	switch(num)
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	49 f0       	breq	.+18     	; 0x78e <readOPB+0x16>
 77c:	28 f0       	brcs	.+10     	; 0x788 <readOPB+0x10>
 77e:	82 30       	cpi	r24, 0x02	; 2
 780:	49 f0       	breq	.+18     	; 0x794 <readOPB+0x1c>
 782:	83 30       	cpi	r24, 0x03	; 3
 784:	51 f0       	breq	.+20     	; 0x79a <readOPB+0x22>
 786:	0b c0       	rjmp	.+22     	; 0x79e <readOPB+0x26>
	{
		case 0:
		GPIO_LOW(multA);
 788:	2a 98       	cbi	0x05, 2	; 5
		GPIO_LOW(multB);
 78a:	44 98       	cbi	0x08, 4	; 8
		break;
 78c:	08 c0       	rjmp	.+16     	; 0x79e <readOPB+0x26>
		case 1:
		GPIO_HIGH(multA);
 78e:	2a 9a       	sbi	0x05, 2	; 5
		GPIO_LOW(multB);
 790:	44 98       	cbi	0x08, 4	; 8
		break;
 792:	05 c0       	rjmp	.+10     	; 0x79e <readOPB+0x26>
		case 2:
		GPIO_LOW(multA);
 794:	2a 98       	cbi	0x05, 2	; 5
		GPIO_HIGH(multB);
 796:	44 9a       	sbi	0x08, 4	; 8
		break;
 798:	02 c0       	rjmp	.+4      	; 0x79e <readOPB+0x26>
		case 3:
		GPIO_HIGH(multA);
 79a:	2a 9a       	sbi	0x05, 2	; 5
		GPIO_HIGH(multB);
 79c:	44 9a       	sbi	0x08, 4	; 8
		break;
	}
	bool A = GPIO_DREAD(phaseA);
 79e:	26 b1       	in	r18, 0x06	; 6
	bool B = GPIO_DREAD(phaseB);
 7a0:	89 b1       	in	r24, 0x09	; 9
 7a2:	80 78       	andi	r24, 0x80	; 128
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
	if (A)
 7aa:	25 ff       	sbrs	r18, 5
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <readOPB+0x3e>
	{
		if (B)  //30~60
 7ae:	89 2b       	or	r24, r25
 7b0:	31 f4       	brne	.+12     	; 0x7be <readOPB+0x46>
			return PLATE_30_60;
		else  //0~30
			return PLATE_0_30;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	08 95       	ret
	}
	else
	{
		if (B)  //60~90
 7b6:	89 2b       	or	r24, r25
 7b8:	21 f4       	brne	.+8      	; 0x7c2 <readOPB+0x4a>
			return PLATE_60_90;
		else  //90~360
			return PLATE_90_360;
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	08 95       	ret
	bool A = GPIO_DREAD(phaseA);
	bool B = GPIO_DREAD(phaseB);
	if (A)
	{
		if (B)  //30~60
			return PLATE_30_60;
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	08 95       	ret
			return PLATE_0_30;
	}
	else
	{
		if (B)  //60~90
			return PLATE_60_90;
 7c2:	83 e0       	ldi	r24, 0x03	; 3
		else  //90~360
			return PLATE_90_360;
	}

}
 7c4:	08 95       	ret

000007c6 <stepOutput>:
void stepOutput(uint8_t num, bool output)
{
	if(output)
 7c6:	66 23       	and	r22, r22
 7c8:	81 f0       	breq	.+32     	; 0x7ea <stepOutput+0x24>
	{
		switch (num)
 7ca:	81 30       	cpi	r24, 0x01	; 1
 7cc:	41 f0       	breq	.+16     	; 0x7de <stepOutput+0x18>
 7ce:	28 f0       	brcs	.+10     	; 0x7da <stepOutput+0x14>
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	39 f0       	breq	.+14     	; 0x7e2 <stepOutput+0x1c>
 7d4:	83 30       	cpi	r24, 0x03	; 3
 7d6:	39 f0       	breq	.+14     	; 0x7e6 <stepOutput+0x20>
 7d8:	08 95       	ret
		{
			case 0:
			GPIO_HIGH(stepPin1);
 7da:	5c 9a       	sbi	0x0b, 4	; 11
			break;
 7dc:	08 95       	ret
			case 1:
			GPIO_HIGH(stepPin2);
 7de:	59 9a       	sbi	0x0b, 1	; 11
			break;
 7e0:	08 95       	ret
			case 2:
			GPIO_HIGH(stepPin3);
 7e2:	2b 9a       	sbi	0x05, 3	; 5
			break;
 7e4:	08 95       	ret
			case 3:
			GPIO_HIGH(stepPin4);
 7e6:	2d 9a       	sbi	0x05, 5	; 5
			break;
 7e8:	08 95       	ret
		}
	}
	else
	{
		switch (num)
 7ea:	81 30       	cpi	r24, 0x01	; 1
 7ec:	41 f0       	breq	.+16     	; 0x7fe <stepOutput+0x38>
 7ee:	28 f0       	brcs	.+10     	; 0x7fa <stepOutput+0x34>
 7f0:	82 30       	cpi	r24, 0x02	; 2
 7f2:	39 f0       	breq	.+14     	; 0x802 <stepOutput+0x3c>
 7f4:	83 30       	cpi	r24, 0x03	; 3
 7f6:	39 f0       	breq	.+14     	; 0x806 <stepOutput+0x40>
 7f8:	08 95       	ret
		{
			case 0:
			GPIO_LOW(stepPin1);
 7fa:	5c 98       	cbi	0x0b, 4	; 11
			break;
 7fc:	08 95       	ret
			case 1:
			GPIO_LOW(stepPin2);
 7fe:	59 98       	cbi	0x0b, 1	; 11
			break;
 800:	08 95       	ret
			case 2:
			GPIO_LOW(stepPin3);
 802:	2b 98       	cbi	0x05, 3	; 5
			break;
 804:	08 95       	ret
			case 3:
			GPIO_LOW(stepPin4);
 806:	2d 98       	cbi	0x05, 5	; 5
 808:	08 95       	ret

0000080a <enOutput>:
		}
	}
}
void enOutput(uint8_t num, bool output)
{
	if(output)
 80a:	66 23       	and	r22, r22
 80c:	81 f0       	breq	.+32     	; 0x82e <enOutput+0x24>
	{
		switch (num)
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	41 f0       	breq	.+16     	; 0x822 <enOutput+0x18>
 812:	28 f0       	brcs	.+10     	; 0x81e <enOutput+0x14>
 814:	82 30       	cpi	r24, 0x02	; 2
 816:	39 f0       	breq	.+14     	; 0x826 <enOutput+0x1c>
 818:	83 30       	cpi	r24, 0x03	; 3
 81a:	39 f0       	breq	.+14     	; 0x82a <enOutput+0x20>
 81c:	08 95       	ret
		{
			case 0:
			GPIO_HIGH(enPin1);
 81e:	5d 9a       	sbi	0x0b, 5	; 11
			break;
 820:	08 95       	ret
			case 1:
			GPIO_HIGH(enPin2);
 822:	5a 9a       	sbi	0x0b, 2	; 11
			break;
 824:	08 95       	ret
			case 2:
			GPIO_HIGH(enPin3);
 826:	2c 9a       	sbi	0x05, 4	; 5
			break;
 828:	08 95       	ret
			case 3:
			GPIO_HIGH(enPin4);
 82a:	2e 9a       	sbi	0x05, 6	; 5
			break;
 82c:	08 95       	ret
		}
	}
	else
	{
		switch (num)
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	41 f0       	breq	.+16     	; 0x842 <enOutput+0x38>
 832:	28 f0       	brcs	.+10     	; 0x83e <enOutput+0x34>
 834:	82 30       	cpi	r24, 0x02	; 2
 836:	39 f0       	breq	.+14     	; 0x846 <enOutput+0x3c>
 838:	83 30       	cpi	r24, 0x03	; 3
 83a:	39 f0       	breq	.+14     	; 0x84a <enOutput+0x40>
 83c:	08 95       	ret
		{
			case 0:
			GPIO_LOW(enPin1);
 83e:	5d 98       	cbi	0x0b, 5	; 11
			break;
 840:	08 95       	ret
			case 1:
			GPIO_LOW(enPin2);
 842:	5a 98       	cbi	0x0b, 2	; 11
			break;
 844:	08 95       	ret
			case 2:
			GPIO_LOW(enPin3);
 846:	2c 98       	cbi	0x05, 4	; 5
			break;
 848:	08 95       	ret
			case 3:
			GPIO_LOW(enPin4);
 84a:	2e 98       	cbi	0x05, 6	; 5
 84c:	08 95       	ret

0000084e <dirOutput>:
		}
	}
}
void dirOutput(uint8_t num, bool output)
{
	if(output)
 84e:	66 23       	and	r22, r22
 850:	81 f0       	breq	.+32     	; 0x872 <dirOutput+0x24>
	{
		switch (num)
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	41 f0       	breq	.+16     	; 0x866 <dirOutput+0x18>
 856:	28 f0       	brcs	.+10     	; 0x862 <dirOutput+0x14>
 858:	82 30       	cpi	r24, 0x02	; 2
 85a:	39 f0       	breq	.+14     	; 0x86a <dirOutput+0x1c>
 85c:	83 30       	cpi	r24, 0x03	; 3
 85e:	39 f0       	breq	.+14     	; 0x86e <dirOutput+0x20>
 860:	08 95       	ret
		{
			case 0:
			GPIO_HIGH(dirPin1);
 862:	5e 9a       	sbi	0x0b, 6	; 11
			break;
 864:	08 95       	ret
			case 1:
			GPIO_HIGH(dirPin2);
 866:	41 9a       	sbi	0x08, 1	; 8
			break;
 868:	08 95       	ret
			case 2:
			GPIO_HIGH(dirPin3);
 86a:	47 9a       	sbi	0x08, 7	; 8
			break;
 86c:	08 95       	ret
			case 3:
			GPIO_HIGH(dirPin4);
 86e:	58 9a       	sbi	0x0b, 0	; 11
			break;
 870:	08 95       	ret
		}
	}
	else
	{
		switch (num)
 872:	81 30       	cpi	r24, 0x01	; 1
 874:	41 f0       	breq	.+16     	; 0x886 <dirOutput+0x38>
 876:	28 f0       	brcs	.+10     	; 0x882 <dirOutput+0x34>
 878:	82 30       	cpi	r24, 0x02	; 2
 87a:	39 f0       	breq	.+14     	; 0x88a <dirOutput+0x3c>
 87c:	83 30       	cpi	r24, 0x03	; 3
 87e:	39 f0       	breq	.+14     	; 0x88e <dirOutput+0x40>
 880:	08 95       	ret
		{
			case 0:
			GPIO_LOW(dirPin1);
 882:	5e 98       	cbi	0x0b, 6	; 11
			break;
 884:	08 95       	ret
			case 1:
			GPIO_LOW(dirPin2);
 886:	41 98       	cbi	0x08, 1	; 8
			break;
 888:	08 95       	ret
			case 2:
			GPIO_LOW(dirPin3);
 88a:	47 98       	cbi	0x08, 7	; 8
			break;
 88c:	08 95       	ret
			case 3:
			GPIO_LOW(dirPin4);
 88e:	58 98       	cbi	0x0b, 0	; 11
 890:	08 95       	ret

00000892 <LVhandle>:
/////////////////////////////////////////////////
/////////////Don't give it a shxt////////////////
/////////////////////////////////////////////////

void LVhandle(void)
{
 892:	2f 92       	push	r2
 894:	3f 92       	push	r3
 896:	4f 92       	push	r4
 898:	5f 92       	push	r5
 89a:	6f 92       	push	r6
 89c:	7f 92       	push	r7
 89e:	8f 92       	push	r8
 8a0:	9f 92       	push	r9
 8a2:	af 92       	push	r10
 8a4:	bf 92       	push	r11
 8a6:	cf 92       	push	r12
 8a8:	df 92       	push	r13
 8aa:	ef 92       	push	r14
 8ac:	ff 92       	push	r15
 8ae:	0f 93       	push	r16
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	cb e0       	ldi	r28, 0x0B	; 11
 8b8:	d1 e0       	ldi	r29, 0x01	; 1
 8ba:	0f 2e       	mov	r0, r31
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	8f 2e       	mov	r8, r31
 8c0:	f1 e0       	ldi	r31, 0x01	; 1
 8c2:	9f 2e       	mov	r9, r31
 8c4:	f0 2d       	mov	r31, r0
 8c6:	0f 2e       	mov	r0, r31
 8c8:	ff e0       	ldi	r31, 0x0F	; 15
 8ca:	ef 2e       	mov	r14, r31
 8cc:	f1 e0       	ldi	r31, 0x01	; 1
 8ce:	ff 2e       	mov	r15, r31
 8d0:	f0 2d       	mov	r31, r0
 8d2:	0f 2e       	mov	r0, r31
 8d4:	f3 e1       	ldi	r31, 0x13	; 19
 8d6:	cf 2e       	mov	r12, r31
 8d8:	f1 e0       	ldi	r31, 0x01	; 1
 8da:	df 2e       	mov	r13, r31
 8dc:	f0 2d       	mov	r31, r0
 8de:	86 01       	movw	r16, r12
 8e0:	31 2c       	mov	r3, r1
					LV_POS_RST_flag[i] = 2;
				else								//angle = 0~90
					LV_POS_RST_flag[i] = 3;
				break;
			case 2:
				LV_stepToGo[i] = 35;				//rotates 1 degree toward 360
 8e2:	0f 2e       	mov	r0, r31
 8e4:	f3 e2       	ldi	r31, 0x23	; 35
 8e6:	6f 2e       	mov	r6, r31
 8e8:	71 2c       	mov	r7, r1
 8ea:	f0 2d       	mov	r31, r0
				if(readOPB(i) != PLATE_90_360)
				{
					LV_stepToGo[i] = 0;
					LV_POS_RST_flag[i] = 4;
 8ec:	68 94       	set
 8ee:	22 24       	eor	r2, r2
 8f0:	22 f8       	bld	r2, 2
				}
				break;
			case 3:
				LV_stepToGo[i] = -35;					//rotates 1 degree toward 0
 8f2:	0f 2e       	mov	r0, r31
 8f4:	fd ed       	ldi	r31, 0xDD	; 221
 8f6:	4f 2e       	mov	r4, r31
 8f8:	55 24       	eor	r5, r5
 8fa:	5a 94       	dec	r5
 8fc:	f0 2d       	mov	r31, r0

void LVhandle(void)
{
	for(int i = 0; i<4; i++)	//pos reset handle
	{
		switch (LV_POS_RST_flag[i])
 8fe:	88 81       	ld	r24, Y
 900:	82 30       	cpi	r24, 0x02	; 2
 902:	a1 f0       	breq	.+40     	; 0x92c <LVhandle+0x9a>
 904:	18 f4       	brcc	.+6      	; 0x90c <LVhandle+0x7a>
 906:	81 30       	cpi	r24, 0x01	; 1
 908:	31 f0       	breq	.+12     	; 0x916 <LVhandle+0x84>
 90a:	30 c0       	rjmp	.+96     	; 0x96c <LVhandle+0xda>
 90c:	83 30       	cpi	r24, 0x03	; 3
 90e:	d9 f0       	breq	.+54     	; 0x946 <LVhandle+0xb4>
 910:	84 30       	cpi	r24, 0x04	; 4
 912:	31 f1       	breq	.+76     	; 0x960 <LVhandle+0xce>
 914:	2b c0       	rjmp	.+86     	; 0x96c <LVhandle+0xda>
		{
			case 0:									//no need to reset
				break;
			case 1:									//PRST CMD is sent, check current POS
				if (readOPB(i) == PLATE_90_360)		//angle = 90~360
 916:	83 2d       	mov	r24, r3
 918:	0e 94 bc 03 	call	0x778	; 0x778 <readOPB>
 91c:	81 11       	cpse	r24, r1
 91e:	03 c0       	rjmp	.+6      	; 0x926 <LVhandle+0x94>
					LV_POS_RST_flag[i] = 2;
 920:	82 e0       	ldi	r24, 0x02	; 2
 922:	88 83       	st	Y, r24
 924:	23 c0       	rjmp	.+70     	; 0x96c <LVhandle+0xda>
				else								//angle = 0~90
					LV_POS_RST_flag[i] = 3;
 926:	83 e0       	ldi	r24, 0x03	; 3
 928:	88 83       	st	Y, r24
 92a:	20 c0       	rjmp	.+64     	; 0x96c <LVhandle+0xda>
				break;
			case 2:
				LV_stepToGo[i] = 35;				//rotates 1 degree toward 360
 92c:	f8 01       	movw	r30, r16
 92e:	71 82       	std	Z+1, r7	; 0x01
 930:	60 82       	st	Z, r6
				if(readOPB(i) != PLATE_90_360)
 932:	83 2d       	mov	r24, r3
 934:	0e 94 bc 03 	call	0x778	; 0x778 <readOPB>
 938:	88 23       	and	r24, r24
 93a:	c1 f0       	breq	.+48     	; 0x96c <LVhandle+0xda>
				{
					LV_stepToGo[i] = 0;
 93c:	f8 01       	movw	r30, r16
 93e:	11 82       	std	Z+1, r1	; 0x01
 940:	10 82       	st	Z, r1
					LV_POS_RST_flag[i] = 4;
 942:	28 82       	st	Y, r2
 944:	13 c0       	rjmp	.+38     	; 0x96c <LVhandle+0xda>
				}
				break;
			case 3:
				LV_stepToGo[i] = -35;					//rotates 1 degree toward 0
 946:	f8 01       	movw	r30, r16
 948:	51 82       	std	Z+1, r5	; 0x01
 94a:	40 82       	st	Z, r4
				if(readOPB(i) == PLATE_90_360)
 94c:	83 2d       	mov	r24, r3
 94e:	0e 94 bc 03 	call	0x778	; 0x778 <readOPB>
 952:	81 11       	cpse	r24, r1
 954:	0b c0       	rjmp	.+22     	; 0x96c <LVhandle+0xda>
				{
					LV_stepToGo[i] = 0;
 956:	f8 01       	movw	r30, r16
 958:	11 82       	std	Z+1, r1	; 0x01
 95a:	10 82       	st	Z, r1
					LV_POS_RST_flag[i] = 4;
 95c:	28 82       	st	Y, r2
 95e:	06 c0       	rjmp	.+12     	; 0x96c <LVhandle+0xda>
				}
				break;
			case 4:									//reset pos done
				LV_state[i] = state_FTRN;
 960:	8b eb       	ldi	r24, 0xBB	; 187
 962:	f4 01       	movw	r30, r8
 964:	80 83       	st	Z, r24
				LV_POS_RST_flag[i] = 0;
 966:	18 82       	st	Y, r1
				LV_currentlength[i] = 0;
 968:	f7 01       	movw	r30, r14
 96a:	10 82       	st	Z, r1
 96c:	21 96       	adiw	r28, 0x01	; 1
 96e:	ff ef       	ldi	r31, 0xFF	; 255
 970:	8f 1a       	sub	r8, r31
 972:	9f 0a       	sbc	r9, r31
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	e8 1a       	sub	r14, r24
 978:	f8 0a       	sbc	r15, r24
 97a:	0e 5f       	subi	r16, 0xFE	; 254
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	33 94       	inc	r3
/////////////Don't give it a shxt////////////////
/////////////////////////////////////////////////

void LVhandle(void)
{
	for(int i = 0; i<4; i++)	//pos reset handle
 980:	e4 e0       	ldi	r30, 0x04	; 4
 982:	3e 12       	cpse	r3, r30
 984:	bc cf       	rjmp	.-136    	; 0x8fe <LVhandle+0x6c>
				break;
		}
		
	}

	if (_Control_Flag_0 >= 5 ) //about 28 degree per sec
 986:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_Control_Flag_0>
 98a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_Control_Flag_0+0x1>
 98e:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <_Control_Flag_0+0x2>
 992:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <_Control_Flag_0+0x3>
 996:	05 97       	sbiw	r24, 0x05	; 5
 998:	a1 05       	cpc	r26, r1
 99a:	b1 05       	cpc	r27, r1
 99c:	08 f4       	brcc	.+2      	; 0x9a0 <LVhandle+0x10e>
 99e:	6a c0       	rjmp	.+212    	; 0xa74 <LVhandle+0x1e2>
	{
		if (LV_HL) //
 9a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LV_HL>
 9a4:	81 11       	cpse	r24, r1
 9a6:	09 c0       	rjmp	.+18     	; 0x9ba <LVhandle+0x128>
 9a8:	c0 e0       	ldi	r28, 0x00	; 0
 9aa:	52 c0       	rjmp	.+164    	; 0xa50 <LVhandle+0x1be>
 9ac:	21 96       	adiw	r28, 0x01	; 1
 9ae:	f2 e0       	ldi	r31, 0x02	; 2
 9b0:	cf 0e       	add	r12, r31
 9b2:	d1 1c       	adc	r13, r1
 9b4:	0f 5f       	subi	r16, 0xFF	; 255
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <LVhandle+0x130>
 9ba:	01 e0       	ldi	r16, 0x01	; 1
 9bc:	10 e0       	ldi	r17, 0x00	; 0
 9be:	c0 e0       	ldi	r28, 0x00	; 0
 9c0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			for(int i = 0; i<4; i++)
			{
				if (LV_stepToGo[i]>0)
 9c2:	f6 01       	movw	r30, r12
 9c4:	80 81       	ld	r24, Z
 9c6:	91 81       	ldd	r25, Z+1	; 0x01
 9c8:	18 16       	cp	r1, r24
 9ca:	19 06       	cpc	r1, r25
 9cc:	9c f4       	brge	.+38     	; 0x9f4 <LVhandle+0x162>
				{
					enOutput(i, false);
 9ce:	60 e0       	ldi	r22, 0x00	; 0
 9d0:	8c 2f       	mov	r24, r28
 9d2:	0e 94 05 04 	call	0x80a	; 0x80a <enOutput>
					dirOutput(i, false);
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	8c 2f       	mov	r24, r28
 9da:	0e 94 27 04 	call	0x84e	; 0x84e <dirOutput>
					stepOutput(i, true);
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	8c 2f       	mov	r24, r28
 9e2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <stepOutput>
					LV_stepToGo[i]--;
 9e6:	f6 01       	movw	r30, r12
 9e8:	80 81       	ld	r24, Z
 9ea:	91 81       	ldd	r25, Z+1	; 0x01
 9ec:	01 97       	sbiw	r24, 0x01	; 1
 9ee:	91 83       	std	Z+1, r25	; 0x01
 9f0:	80 83       	st	Z, r24
 9f2:	1f c0       	rjmp	.+62     	; 0xa32 <LVhandle+0x1a0>
				}
				else if (LV_stepToGo[i]<0)
 9f4:	99 23       	and	r25, r25
 9f6:	9c f4       	brge	.+38     	; 0xa1e <LVhandle+0x18c>
				{
					enOutput(i, false);
 9f8:	60 e0       	ldi	r22, 0x00	; 0
 9fa:	8c 2f       	mov	r24, r28
 9fc:	0e 94 05 04 	call	0x80a	; 0x80a <enOutput>
					dirOutput(i, true);
 a00:	61 e0       	ldi	r22, 0x01	; 1
 a02:	8c 2f       	mov	r24, r28
 a04:	0e 94 27 04 	call	0x84e	; 0x84e <dirOutput>
					stepOutput(i, true);
 a08:	61 e0       	ldi	r22, 0x01	; 1
 a0a:	8c 2f       	mov	r24, r28
 a0c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <stepOutput>
					LV_stepToGo[i]++;
 a10:	f6 01       	movw	r30, r12
 a12:	80 81       	ld	r24, Z
 a14:	91 81       	ldd	r25, Z+1	; 0x01
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	91 83       	std	Z+1, r25	; 0x01
 a1a:	80 83       	st	Z, r24
 a1c:	0a c0       	rjmp	.+20     	; 0xa32 <LVhandle+0x1a0>
				}
				else //LV_stepToGo[i] = 0
				{
					enOutput(i, true);
 a1e:	61 e0       	ldi	r22, 0x01	; 1
 a20:	8c 2f       	mov	r24, r28
 a22:	0e 94 05 04 	call	0x80a	; 0x80a <enOutput>
					if(i == 0)
 a26:	20 97       	sbiw	r28, 0x00	; 0
 a28:	21 f4       	brne	.+8      	; 0xa32 <LVhandle+0x1a0>
						done = true;
 a2a:	81 e0       	ldi	r24, 0x01	; 1
 a2c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <done>
 a30:	bd cf       	rjmp	.-134    	; 0x9ac <LVhandle+0x11a>

	if (_Control_Flag_0 >= 5 ) //about 28 degree per sec
	{
		if (LV_HL) //
		{
			for(int i = 0; i<4; i++)
 a32:	04 30       	cpi	r16, 0x04	; 4
 a34:	11 05       	cpc	r17, r1
 a36:	0c f4       	brge	.+2      	; 0xa3a <LVhandle+0x1a8>
 a38:	b9 cf       	rjmp	.-142    	; 0x9ac <LVhandle+0x11a>
					enOutput(i, true);
					if(i == 0)
						done = true;
				}
			}
			CCF0();
 a3a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 a3e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 a42:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 a46:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
			LV_HL = false;
 a4a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LV_HL>
 a4e:	12 c0       	rjmp	.+36     	; 0xa74 <LVhandle+0x1e2>
		}
		else
		{
			for(int i = 0; i<4; i++)
			{
				stepOutput(i, false);
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	8c 2f       	mov	r24, r28
 a54:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <stepOutput>
 a58:	cf 5f       	subi	r28, 0xFF	; 255
			CCF0();
			LV_HL = false;
		}
		else
		{
			for(int i = 0; i<4; i++)
 a5a:	c4 30       	cpi	r28, 0x04	; 4
 a5c:	c9 f7       	brne	.-14     	; 0xa50 <LVhandle+0x1be>
			{
				stepOutput(i, false);
			}
			CCF0();
 a5e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_Control_Flag_0>
 a62:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_Control_Flag_0+0x1>
 a66:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <_Control_Flag_0+0x2>
 a6a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <_Control_Flag_0+0x3>
			LV_HL = true;
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LV_HL>
		}
	}

}
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	1f 91       	pop	r17
 a7a:	0f 91       	pop	r16
 a7c:	ff 90       	pop	r15
 a7e:	ef 90       	pop	r14
 a80:	df 90       	pop	r13
 a82:	cf 90       	pop	r12
 a84:	bf 90       	pop	r11
 a86:	af 90       	pop	r10
 a88:	9f 90       	pop	r9
 a8a:	8f 90       	pop	r8
 a8c:	7f 90       	pop	r7
 a8e:	6f 90       	pop	r6
 a90:	5f 90       	pop	r5
 a92:	4f 90       	pop	r4
 a94:	3f 90       	pop	r3
 a96:	2f 90       	pop	r2
 a98:	08 95       	ret

00000a9a <loop>:
}

void loop()
{
	
	wdt_reset();
 a9a:	a8 95       	wdr
	
	CANhandle();
 a9c:	0e 94 1e 03 	call	0x63c	; 0x63c <CANhandle>
	//LV_stepToGo[0] = 100;
	LVhandle();
 aa0:	0e 94 49 04 	call	0x892	; 0x892 <LVhandle>
 aa4:	08 95       	ret

00000aa6 <CANSETID>:
 aa6:	0f 93       	push	r16
 aa8:	1f 93       	push	r17
 aaa:	e0 ef       	ldi	r30, 0xF0	; 240
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	10 82       	st	Z, r1
 ab0:	11 82       	std	Z+1, r1	; 0x01
 ab2:	12 82       	std	Z+2, r1	; 0x02
 ab4:	13 82       	std	Z+3, r1	; 0x03
 ab6:	00 81       	ld	r16, Z
 ab8:	11 81       	ldd	r17, Z+1	; 0x01
 aba:	22 81       	ldd	r18, Z+2	; 0x02
 abc:	33 81       	ldd	r19, Z+3	; 0x03
 abe:	ab 01       	movw	r20, r22
 ac0:	bc 01       	movw	r22, r24
 ac2:	03 2e       	mov	r0, r19
 ac4:	35 e1       	ldi	r19, 0x15	; 21
 ac6:	44 0f       	add	r20, r20
 ac8:	55 1f       	adc	r21, r21
 aca:	66 1f       	adc	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	3a 95       	dec	r19
 ad0:	d1 f7       	brne	.-12     	; 0xac6 <CANSETID+0x20>
 ad2:	30 2d       	mov	r19, r0
 ad4:	db 01       	movw	r26, r22
 ad6:	ca 01       	movw	r24, r20
 ad8:	80 2b       	or	r24, r16
 ada:	91 2b       	or	r25, r17
 adc:	a2 2b       	or	r26, r18
 ade:	b3 2b       	or	r27, r19
 ae0:	80 83       	st	Z, r24
 ae2:	91 83       	std	Z+1, r25	; 0x01
 ae4:	a2 83       	std	Z+2, r26	; 0x02
 ae6:	b3 83       	std	Z+3, r27	; 0x03
 ae8:	1f 91       	pop	r17
 aea:	0f 91       	pop	r16
 aec:	08 95       	ret

00000aee <CAN_initialize>:
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <CANRXID>
 af6:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <CANRXID+0x1>
 afa:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <CANRXID+0x2>
 afe:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <CANRXID+0x3>
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	cd ee       	ldi	r28, 0xED	; 237
 b0c:	d0 e0       	ldi	r29, 0x00	; 0
 b0e:	af ee       	ldi	r26, 0xEF	; 239
 b10:	b0 e0       	ldi	r27, 0x00	; 0
 b12:	ee ee       	ldi	r30, 0xEE	; 238
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	98 2f       	mov	r25, r24
 b18:	92 95       	swap	r25
 b1a:	90 7f       	andi	r25, 0xF0	; 240
 b1c:	98 83       	st	Y, r25
 b1e:	1c 92       	st	X, r1
 b20:	10 82       	st	Z, r1
 b22:	8f 5f       	subi	r24, 0xFF	; 255
 b24:	86 30       	cpi	r24, 0x06	; 6
 b26:	b9 f7       	brne	.-18     	; 0xb16 <CAN_initialize+0x28>
 b28:	e8 ed       	ldi	r30, 0xD8	; 216
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	80 81       	ld	r24, Z
 b2e:	10 82       	st	Z, r1
 b30:	80 81       	ld	r24, Z
 b32:	82 60       	ori	r24, 0x02	; 2
 b34:	80 83       	st	Z, r24
 b36:	ed ee       	ldi	r30, 0xED	; 237
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	10 82       	st	Z, r1
 b3c:	80 81       	ld	r24, Z
 b3e:	87 7f       	andi	r24, 0xF7	; 247
 b40:	80 83       	st	Z, r24
 b42:	88 e8       	ldi	r24, 0x88	; 136
 b44:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
 b48:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 b4c:	82 e0       	ldi	r24, 0x02	; 2
 b4e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 b52:	8c e0       	ldi	r24, 0x0C	; 12
 b54:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 b58:	87 e3       	ldi	r24, 0x37	; 55
 b5a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	9f ef       	ldi	r25, 0xFF	; 255
 b62:	dc 01       	movw	r26, r24
 b64:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
 b68:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <__DATA_REGION_ORIGIN__+0x95>
 b6c:	a0 93 f6 00 	sts	0x00F6, r26	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
 b70:	b0 93 f7 00 	sts	0x00F7, r27	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
 b74:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <CANRXID>
 b78:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <CANRXID+0x1>
 b7c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <CANRXID+0x2>
 b80:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <CANRXID+0x3>
 b84:	0e 94 53 05 	call	0xaa6	; 0xaa6 <CANSETID>
 b88:	df 91       	pop	r29
 b8a:	cf 91       	pop	r28
 b8c:	08 95       	ret

00000b8e <CANRead>:
 b8e:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
 b92:	8f 70       	andi	r24, 0x0F	; 15
 b94:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <CAN_MSGLEN>
 b98:	ed ee       	ldi	r30, 0xED	; 237
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	80 81       	ld	r24, Z
 b9e:	8e 7f       	andi	r24, 0xFE	; 254
 ba0:	80 83       	st	Z, r24
 ba2:	80 81       	ld	r24, Z
 ba4:	8d 7f       	andi	r24, 0xFD	; 253
 ba6:	80 83       	st	Z, r24
 ba8:	80 81       	ld	r24, Z
 baa:	8b 7f       	andi	r24, 0xFB	; 251
 bac:	80 83       	st	Z, r24
 bae:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <CAN_MSGLEN>
 bb2:	12 16       	cp	r1, r18
 bb4:	6c f4       	brge	.+26     	; 0xbd0 <CANRead+0x42>
 bb6:	eb e1       	ldi	r30, 0x1B	; 27
 bb8:	f1 e0       	ldi	r31, 0x01	; 1
 bba:	21 50       	subi	r18, 0x01	; 1
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	24 5e       	subi	r18, 0xE4	; 228
 bc0:	3e 4f       	sbci	r19, 0xFE	; 254
 bc2:	aa ef       	ldi	r26, 0xFA	; 250
 bc4:	b0 e0       	ldi	r27, 0x00	; 0
 bc6:	8c 91       	ld	r24, X
 bc8:	81 93       	st	Z+, r24
 bca:	e2 17       	cp	r30, r18
 bcc:	f3 07       	cpc	r31, r19
 bce:	d9 f7       	brne	.-10     	; 0xbc6 <CANRead+0x38>
 bd0:	80 e8       	ldi	r24, 0x80	; 128
 bd2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
 bd6:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__DATA_REGION_ORIGIN__+0x9a>
 bda:	ee ee       	ldi	r30, 0xEE	; 238
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	8f 7d       	andi	r24, 0xDF	; 223
 be2:	80 83       	st	Z, r24
 be4:	08 95       	ret

00000be6 <__vector_14>:
 be6:	1f 92       	push	r1
 be8:	0f 92       	push	r0
 bea:	0f b6       	in	r0, 0x3f	; 63
 bec:	0f 92       	push	r0
 bee:	11 24       	eor	r1, r1
 bf0:	2f 93       	push	r18
 bf2:	3f 93       	push	r19
 bf4:	8f 93       	push	r24
 bf6:	9f 93       	push	r25
 bf8:	88 e8       	ldi	r24, 0x88	; 136
 bfa:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 bfe:	8a ef       	ldi	r24, 0xFA	; 250
 c00:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 c04:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <LED_state>
 c08:	88 23       	and	r24, r24
 c0a:	21 f0       	breq	.+8      	; 0xc14 <__vector_14+0x2e>
 c0c:	5c 9a       	sbi	0x0b, 4	; 11
 c0e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <LED_state>
 c12:	04 c0       	rjmp	.+8      	; 0xc1c <__vector_14+0x36>
 c14:	5c 98       	cbi	0x0b, 4	; 11
 c16:	81 e0       	ldi	r24, 0x01	; 1
 c18:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <LED_state>
 c1c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 c20:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 c24:	01 96       	adiw	r24, 0x01	; 1
 c26:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <PWMCounter+0x1>
 c2a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <PWMCounter>
 c2e:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <PWMCounter>
 c32:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <PWMCounter+0x1>
 c36:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PWMPeriod>
 c3a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PWMPeriod+0x1>
 c3e:	28 17       	cp	r18, r24
 c40:	39 07       	cpc	r19, r25
 c42:	2c f1       	brlt	.+74     	; 0xc8e <__vector_14+0xa8>
 c44:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c48:	80 fd       	sbrc	r24, 0
 c4a:	5e 9a       	sbi	0x0b, 6	; 11
 c4c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c50:	81 fd       	sbrc	r24, 1
 c52:	5f 9a       	sbi	0x0b, 7	; 11
 c54:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c58:	82 fd       	sbrc	r24, 2
 c5a:	2a 9a       	sbi	0x05, 2	; 5
 c5c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c60:	83 fd       	sbrc	r24, 3
 c62:	44 9a       	sbi	0x08, 4	; 8
 c64:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c68:	84 fd       	sbrc	r24, 4
 c6a:	45 9a       	sbi	0x08, 5	; 8
 c6c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c70:	85 fd       	sbrc	r24, 5
 c72:	46 9a       	sbi	0x08, 6	; 8
 c74:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c78:	86 fd       	sbrc	r24, 6
 c7a:	2c 9a       	sbi	0x05, 4	; 5
 c7c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c80:	88 23       	and	r24, r24
 c82:	0c f4       	brge	.+2      	; 0xc86 <__vector_14+0xa0>
 c84:	47 9a       	sbi	0x08, 7	; 8
 c86:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <PWMCounter+0x1>
 c8a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <PWMCounter>
 c8e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 c92:	80 ff       	sbrs	r24, 0
 c94:	0c c0       	rjmp	.+24     	; 0xcae <__vector_14+0xc8>
 c96:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <PWMValue>
 c9a:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <PWMValue+0x1>
 c9e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 ca2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 ca6:	82 17       	cp	r24, r18
 ca8:	93 07       	cpc	r25, r19
 caa:	0c f0       	brlt	.+2      	; 0xcae <__vector_14+0xc8>
 cac:	5e 98       	cbi	0x0b, 6	; 11
 cae:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 cb2:	81 ff       	sbrs	r24, 1
 cb4:	0c c0       	rjmp	.+24     	; 0xcce <__vector_14+0xe8>
 cb6:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <PWMValue+0x2>
 cba:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <PWMValue+0x3>
 cbe:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 cc2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 cc6:	82 17       	cp	r24, r18
 cc8:	93 07       	cpc	r25, r19
 cca:	0c f0       	brlt	.+2      	; 0xcce <__vector_14+0xe8>
 ccc:	5f 98       	cbi	0x0b, 7	; 11
 cce:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 cd2:	82 ff       	sbrs	r24, 2
 cd4:	0c c0       	rjmp	.+24     	; 0xcee <__vector_14+0x108>
 cd6:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <PWMValue+0x4>
 cda:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <PWMValue+0x5>
 cde:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 ce2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 ce6:	82 17       	cp	r24, r18
 ce8:	93 07       	cpc	r25, r19
 cea:	0c f0       	brlt	.+2      	; 0xcee <__vector_14+0x108>
 cec:	2a 98       	cbi	0x05, 2	; 5
 cee:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 cf2:	83 ff       	sbrs	r24, 3
 cf4:	0c c0       	rjmp	.+24     	; 0xd0e <__vector_14+0x128>
 cf6:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <PWMValue+0x6>
 cfa:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <PWMValue+0x7>
 cfe:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 d02:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 d06:	82 17       	cp	r24, r18
 d08:	93 07       	cpc	r25, r19
 d0a:	0c f0       	brlt	.+2      	; 0xd0e <__vector_14+0x128>
 d0c:	44 98       	cbi	0x08, 4	; 8
 d0e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 d12:	84 ff       	sbrs	r24, 4
 d14:	0c c0       	rjmp	.+24     	; 0xd2e <__vector_14+0x148>
 d16:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <PWMValue+0x8>
 d1a:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <PWMValue+0x9>
 d1e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 d22:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 d26:	82 17       	cp	r24, r18
 d28:	93 07       	cpc	r25, r19
 d2a:	0c f0       	brlt	.+2      	; 0xd2e <__vector_14+0x148>
 d2c:	45 98       	cbi	0x08, 5	; 8
 d2e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 d32:	85 ff       	sbrs	r24, 5
 d34:	0c c0       	rjmp	.+24     	; 0xd4e <__vector_14+0x168>
 d36:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <PWMValue+0xa>
 d3a:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <PWMValue+0xb>
 d3e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 d42:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 d46:	82 17       	cp	r24, r18
 d48:	93 07       	cpc	r25, r19
 d4a:	0c f0       	brlt	.+2      	; 0xd4e <__vector_14+0x168>
 d4c:	46 98       	cbi	0x08, 6	; 8
 d4e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 d52:	86 ff       	sbrs	r24, 6
 d54:	0c c0       	rjmp	.+24     	; 0xd6e <__vector_14+0x188>
 d56:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <PWMValue+0xc>
 d5a:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <PWMValue+0xd>
 d5e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 d62:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 d66:	82 17       	cp	r24, r18
 d68:	93 07       	cpc	r25, r19
 d6a:	0c f0       	brlt	.+2      	; 0xd6e <__vector_14+0x188>
 d6c:	2c 98       	cbi	0x05, 4	; 5
 d6e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <PWM_Mask>
 d72:	88 23       	and	r24, r24
 d74:	64 f4       	brge	.+24     	; 0xd8e <__vector_14+0x1a8>
 d76:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <PWMValue+0xe>
 d7a:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <PWMValue+0xf>
 d7e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <PWMCounter>
 d82:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <PWMCounter+0x1>
 d86:	82 17       	cp	r24, r18
 d88:	93 07       	cpc	r25, r19
 d8a:	0c f0       	brlt	.+2      	; 0xd8e <__vector_14+0x1a8>
 d8c:	47 98       	cbi	0x08, 7	; 8
 d8e:	9f 91       	pop	r25
 d90:	8f 91       	pop	r24
 d92:	3f 91       	pop	r19
 d94:	2f 91       	pop	r18
 d96:	0f 90       	pop	r0
 d98:	0f be       	out	0x3f, r0	; 63
 d9a:	0f 90       	pop	r0
 d9c:	1f 90       	pop	r1
 d9e:	18 95       	reti

00000da0 <_exit>:
 da0:	f8 94       	cli

00000da2 <__stop_program>:
 da2:	ff cf       	rjmp	.-2      	; 0xda2 <__stop_program>
